// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_config.proto

#ifndef PROTOBUF_game_5fconfig_2eproto__INCLUDED
#define PROTOBUF_game_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_game_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFormationImpl();
void InitDefaultsFormation();
void InitDefaultsFormationListImpl();
void InitDefaultsFormationList();
void InitDefaultsItemImpl();
void InitDefaultsItem();
void InitDefaultsItemListImpl();
void InitDefaultsItemList();
void InitDefaultsTotalDataImpl();
void InitDefaultsTotalData();
void InitDefaultsTotalDataListImpl();
void InitDefaultsTotalDataList();
void InitDefaultsItemInfoImpl();
void InitDefaultsItemInfo();
void InitDefaultsRegionImpl();
void InitDefaultsRegion();
void InitDefaultsRegionListImpl();
void InitDefaultsRegionList();
void InitDefaultsMatchParamImpl();
void InitDefaultsMatchParam();
void InitDefaultsMatchParamListImpl();
void InitDefaultsMatchParamList();
inline void InitDefaults() {
  InitDefaultsFormation();
  InitDefaultsFormationList();
  InitDefaultsItem();
  InitDefaultsItemList();
  InitDefaultsTotalData();
  InitDefaultsTotalDataList();
  InitDefaultsItemInfo();
  InitDefaultsRegion();
  InitDefaultsRegionList();
  InitDefaultsMatchParam();
  InitDefaultsMatchParamList();
}
}  // namespace protobuf_game_5fconfig_2eproto
namespace idleafk {
class Formation;
class FormationDefaultTypeInternal;
extern FormationDefaultTypeInternal _Formation_default_instance_;
class FormationList;
class FormationListDefaultTypeInternal;
extern FormationListDefaultTypeInternal _FormationList_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class ItemInfo;
class ItemInfoDefaultTypeInternal;
extern ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
class ItemList;
class ItemListDefaultTypeInternal;
extern ItemListDefaultTypeInternal _ItemList_default_instance_;
class MatchParam;
class MatchParamDefaultTypeInternal;
extern MatchParamDefaultTypeInternal _MatchParam_default_instance_;
class MatchParamList;
class MatchParamListDefaultTypeInternal;
extern MatchParamListDefaultTypeInternal _MatchParamList_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class RegionList;
class RegionListDefaultTypeInternal;
extern RegionListDefaultTypeInternal _RegionList_default_instance_;
class TotalData;
class TotalDataDefaultTypeInternal;
extern TotalDataDefaultTypeInternal _TotalData_default_instance_;
class TotalDataList;
class TotalDataListDefaultTypeInternal;
extern TotalDataListDefaultTypeInternal _TotalDataList_default_instance_;
}  // namespace idleafk
namespace idleafk {

enum Identity {
  Forwad = 0,
  Mid = 1,
  Back = 2,
  Identity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Identity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Identity_IsValid(int value);
const Identity Identity_MIN = Forwad;
const Identity Identity_MAX = Back;
const int Identity_ARRAYSIZE = Identity_MAX + 1;

const ::google::protobuf::EnumDescriptor* Identity_descriptor();
inline const ::std::string& Identity_Name(Identity value) {
  return ::google::protobuf::internal::NameOfEnum(
    Identity_descriptor(), value);
}
inline bool Identity_Parse(
    const ::std::string& name, Identity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Identity>(
    Identity_descriptor(), name, value);
}
// ===================================================================

class Formation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.Formation) */ {
 public:
  Formation();
  virtual ~Formation();

  Formation(const Formation& from);

  inline Formation& operator=(const Formation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Formation(Formation&& from) noexcept
    : Formation() {
    *this = ::std::move(from);
  }

  inline Formation& operator=(Formation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Formation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Formation* internal_default_instance() {
    return reinterpret_cast<const Formation*>(
               &_Formation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Formation* other);
  friend void swap(Formation& a, Formation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Formation* New() const PROTOBUF_FINAL { return New(NULL); }

  Formation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Formation& from);
  void MergeFrom(const Formation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Formation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kickOffPos = 5;
  int kickoffpos_size() const;
  void clear_kickoffpos();
  static const int kKickOffPosFieldNumber = 5;
  float kickoffpos(int index) const;
  void set_kickoffpos(int index, float value);
  void add_kickoffpos(float value);
  const ::google::protobuf::RepeatedField< float >&
      kickoffpos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_kickoffpos();

  // repeated float minPos = 6;
  int minpos_size() const;
  void clear_minpos();
  static const int kMinPosFieldNumber = 6;
  float minpos(int index) const;
  void set_minpos(int index, float value);
  void add_minpos(float value);
  const ::google::protobuf::RepeatedField< float >&
      minpos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_minpos();

  // repeated float maxPos = 7;
  int maxpos_size() const;
  void clear_maxpos();
  static const int kMaxPosFieldNumber = 7;
  float maxpos(int index) const;
  void set_maxpos(int index, float value);
  void add_maxpos(float value);
  const ::google::protobuf::RepeatedField< float >&
      maxpos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_maxpos();

  // sint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // sint32 pos = 2;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // sint32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // sint32 identity = 4;
  void clear_identity();
  static const int kIdentityFieldNumber = 4;
  ::google::protobuf::int32 identity() const;
  void set_identity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:idleafk.Formation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > kickoffpos_;
  mutable int _kickoffpos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > minpos_;
  mutable int _minpos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > maxpos_;
  mutable int _maxpos_cached_byte_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 identity_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsFormationImpl();
};
// -------------------------------------------------------------------

class FormationList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.FormationList) */ {
 public:
  FormationList();
  virtual ~FormationList();

  FormationList(const FormationList& from);

  inline FormationList& operator=(const FormationList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FormationList(FormationList&& from) noexcept
    : FormationList() {
    *this = ::std::move(from);
  }

  inline FormationList& operator=(FormationList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FormationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormationList* internal_default_instance() {
    return reinterpret_cast<const FormationList*>(
               &_FormationList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FormationList* other);
  friend void swap(FormationList& a, FormationList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FormationList* New() const PROTOBUF_FINAL { return New(NULL); }

  FormationList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FormationList& from);
  void MergeFrom(const FormationList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FormationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .idleafk.Formation rows = 1;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  const ::idleafk::Formation& rows(int index) const;
  ::idleafk::Formation* mutable_rows(int index);
  ::idleafk::Formation* add_rows();
  ::google::protobuf::RepeatedPtrField< ::idleafk::Formation >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::idleafk::Formation >&
      rows() const;

  // @@protoc_insertion_point(class_scope:idleafk.FormationList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::idleafk::Formation > rows_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsFormationListImpl();
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Item* other);
  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const PROTOBUF_FINAL { return New(NULL); }

  Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 equipmentExp = 17;
  int equipmentexp_size() const;
  void clear_equipmentexp();
  static const int kEquipmentExpFieldNumber = 17;
  ::google::protobuf::int32 equipmentexp(int index) const;
  void set_equipmentexp(int index, ::google::protobuf::int32 value);
  void add_equipmentexp(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      equipmentexp() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_equipmentexp();

  // repeated sint32 idleRewardId = 18;
  int idlerewardid_size() const;
  void clear_idlerewardid();
  static const int kIdleRewardIdFieldNumber = 18;
  ::google::protobuf::int32 idlerewardid(int index) const;
  void set_idlerewardid(int index, ::google::protobuf::int32 value);
  void add_idlerewardid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      idlerewardid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_idlerewardid();

  // repeated sint32 giftReward = 21;
  int giftreward_size() const;
  void clear_giftreward();
  static const int kGiftRewardFieldNumber = 21;
  ::google::protobuf::int32 giftreward(int index) const;
  void set_giftreward(int index, ::google::protobuf::int32 value);
  void add_giftreward(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      giftreward() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_giftreward();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string des = 4;
  void clear_des();
  static const int kDesFieldNumber = 4;
  const ::std::string& des() const;
  void set_des(const ::std::string& value);
  #if LANG_CXX11
  void set_des(::std::string&& value);
  #endif
  void set_des(const char* value);
  void set_des(const char* value, size_t size);
  ::std::string* mutable_des();
  ::std::string* release_des();
  void set_allocated_des(::std::string* des);

  // string iconRes = 10;
  void clear_iconres();
  static const int kIconResFieldNumber = 10;
  const ::std::string& iconres() const;
  void set_iconres(const ::std::string& value);
  #if LANG_CXX11
  void set_iconres(::std::string&& value);
  #endif
  void set_iconres(const char* value);
  void set_iconres(const char* value, size_t size);
  ::std::string* mutable_iconres();
  ::std::string* release_iconres();
  void set_allocated_iconres(::std::string* iconres);

  // string iconBottomRes = 11;
  void clear_iconbottomres();
  static const int kIconBottomResFieldNumber = 11;
  const ::std::string& iconbottomres() const;
  void set_iconbottomres(const ::std::string& value);
  #if LANG_CXX11
  void set_iconbottomres(::std::string&& value);
  #endif
  void set_iconbottomres(const char* value);
  void set_iconbottomres(const char* value, size_t size);
  ::std::string* mutable_iconbottomres();
  ::std::string* release_iconbottomres();
  void set_allocated_iconbottomres(::std::string* iconbottomres);

  // string miniIconRes = 12;
  void clear_miniiconres();
  static const int kMiniIconResFieldNumber = 12;
  const ::std::string& miniiconres() const;
  void set_miniiconres(const ::std::string& value);
  #if LANG_CXX11
  void set_miniiconres(::std::string&& value);
  #endif
  void set_miniiconres(const char* value);
  void set_miniiconres(const char* value, size_t size);
  ::std::string* mutable_miniiconres();
  ::std::string* release_miniiconres();
  void set_allocated_miniiconres(::std::string* miniiconres);

  // string battleIconRes = 13;
  void clear_battleiconres();
  static const int kBattleIconResFieldNumber = 13;
  const ::std::string& battleiconres() const;
  void set_battleiconres(const ::std::string& value);
  #if LANG_CXX11
  void set_battleiconres(::std::string&& value);
  #endif
  void set_battleiconres(const char* value);
  void set_battleiconres(const char* value, size_t size);
  ::std::string* mutable_battleiconres();
  ::std::string* release_battleiconres();
  void set_allocated_battleiconres(::std::string* battleiconres);

  // string cornerRes = 14;
  void clear_cornerres();
  static const int kCornerResFieldNumber = 14;
  const ::std::string& cornerres() const;
  void set_cornerres(const ::std::string& value);
  #if LANG_CXX11
  void set_cornerres(::std::string&& value);
  #endif
  void set_cornerres(const char* value);
  void set_cornerres(const char* value, size_t size);
  ::std::string* mutable_cornerres();
  ::std::string* release_cornerres();
  void set_allocated_cornerres(::std::string* cornerres);

  // sint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // sint32 itemType = 5;
  void clear_itemtype();
  static const int kItemTypeFieldNumber = 5;
  ::google::protobuf::int32 itemtype() const;
  void set_itemtype(::google::protobuf::int32 value);

  // sint32 bagType = 6;
  void clear_bagtype();
  static const int kBagTypeFieldNumber = 6;
  ::google::protobuf::int32 bagtype() const;
  void set_bagtype(::google::protobuf::int32 value);

  // sint32 flyIcon = 7;
  void clear_flyicon();
  static const int kFlyIconFieldNumber = 7;
  ::google::protobuf::int32 flyicon() const;
  void set_flyicon(::google::protobuf::int32 value);

  // sint32 quality = 8;
  void clear_quality();
  static const int kQualityFieldNumber = 8;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // sint32 sort = 9;
  void clear_sort();
  static const int kSortFieldNumber = 9;
  ::google::protobuf::int32 sort() const;
  void set_sort(::google::protobuf::int32 value);

  // sint32 stack = 15;
  void clear_stack();
  static const int kStackFieldNumber = 15;
  ::google::protobuf::int32 stack() const;
  void set_stack(::google::protobuf::int32 value);

  // sint32 relationID = 16;
  void clear_relationid();
  static const int kRelationIDFieldNumber = 16;
  ::google::protobuf::int32 relationid() const;
  void set_relationid(::google::protobuf::int32 value);

  // sint32 idleRewardTime = 19;
  void clear_idlerewardtime();
  static const int kIdleRewardTimeFieldNumber = 19;
  ::google::protobuf::int32 idlerewardtime() const;
  void set_idlerewardtime(::google::protobuf::int32 value);

  // sint32 idleRewardVip = 20;
  void clear_idlerewardvip();
  static const int kIdleRewardVipFieldNumber = 20;
  ::google::protobuf::int32 idlerewardvip() const;
  void set_idlerewardvip(::google::protobuf::int32 value);

  // sint32 dropBag = 22;
  void clear_dropbag();
  static const int kDropBagFieldNumber = 22;
  ::google::protobuf::int32 dropbag() const;
  void set_dropbag(::google::protobuf::int32 value);

  // sint32 synthesizeNum = 23;
  void clear_synthesizenum();
  static const int kSynthesizeNumFieldNumber = 23;
  ::google::protobuf::int32 synthesizenum() const;
  void set_synthesizenum(::google::protobuf::int32 value);

  // sint32 synthesizeDropBag = 24;
  void clear_synthesizedropbag();
  static const int kSynthesizeDropBagFieldNumber = 24;
  ::google::protobuf::int32 synthesizedropbag() const;
  void set_synthesizedropbag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:idleafk.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > equipmentexp_;
  mutable int _equipmentexp_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > idlerewardid_;
  mutable int _idlerewardid_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > giftreward_;
  mutable int _giftreward_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr des_;
  ::google::protobuf::internal::ArenaStringPtr iconres_;
  ::google::protobuf::internal::ArenaStringPtr iconbottomres_;
  ::google::protobuf::internal::ArenaStringPtr miniiconres_;
  ::google::protobuf::internal::ArenaStringPtr battleiconres_;
  ::google::protobuf::internal::ArenaStringPtr cornerres_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 itemtype_;
  ::google::protobuf::int32 bagtype_;
  ::google::protobuf::int32 flyicon_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::int32 stack_;
  ::google::protobuf::int32 relationid_;
  ::google::protobuf::int32 idlerewardtime_;
  ::google::protobuf::int32 idlerewardvip_;
  ::google::protobuf::int32 dropbag_;
  ::google::protobuf::int32 synthesizenum_;
  ::google::protobuf::int32 synthesizedropbag_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsItemImpl();
};
// -------------------------------------------------------------------

class ItemList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.ItemList) */ {
 public:
  ItemList();
  virtual ~ItemList();

  ItemList(const ItemList& from);

  inline ItemList& operator=(const ItemList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemList(ItemList&& from) noexcept
    : ItemList() {
    *this = ::std::move(from);
  }

  inline ItemList& operator=(ItemList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemList* internal_default_instance() {
    return reinterpret_cast<const ItemList*>(
               &_ItemList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ItemList* other);
  friend void swap(ItemList& a, ItemList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemList* New() const PROTOBUF_FINAL { return New(NULL); }

  ItemList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ItemList& from);
  void MergeFrom(const ItemList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ItemList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .idleafk.Item rows = 1;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  const ::idleafk::Item& rows(int index) const;
  ::idleafk::Item* mutable_rows(int index);
  ::idleafk::Item* add_rows();
  ::google::protobuf::RepeatedPtrField< ::idleafk::Item >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::idleafk::Item >&
      rows() const;

  // @@protoc_insertion_point(class_scope:idleafk.ItemList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::idleafk::Item > rows_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsItemListImpl();
};
// -------------------------------------------------------------------

class TotalData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.TotalData) */ {
 public:
  TotalData();
  virtual ~TotalData();

  TotalData(const TotalData& from);

  inline TotalData& operator=(const TotalData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TotalData(TotalData&& from) noexcept
    : TotalData() {
    *this = ::std::move(from);
  }

  inline TotalData& operator=(TotalData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TotalData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TotalData* internal_default_instance() {
    return reinterpret_cast<const TotalData*>(
               &_TotalData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TotalData* other);
  friend void swap(TotalData& a, TotalData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TotalData* New() const PROTOBUF_FINAL { return New(NULL); }

  TotalData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TotalData& from);
  void MergeFrom(const TotalData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TotalData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string courses = 2;
  int courses_size() const;
  void clear_courses();
  static const int kCoursesFieldNumber = 2;
  const ::std::string& courses(int index) const;
  ::std::string* mutable_courses(int index);
  void set_courses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_courses(int index, ::std::string&& value);
  #endif
  void set_courses(int index, const char* value);
  void set_courses(int index, const char* value, size_t size);
  ::std::string* add_courses();
  void add_courses(const ::std::string& value);
  #if LANG_CXX11
  void add_courses(::std::string&& value);
  #endif
  void add_courses(const char* value);
  void add_courses(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& courses() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_courses();

  // repeated .idleafk.ItemInfo drink = 5;
  int drink_size() const;
  void clear_drink();
  static const int kDrinkFieldNumber = 5;
  const ::idleafk::ItemInfo& drink(int index) const;
  ::idleafk::ItemInfo* mutable_drink(int index);
  ::idleafk::ItemInfo* add_drink();
  ::google::protobuf::RepeatedPtrField< ::idleafk::ItemInfo >*
      mutable_drink();
  const ::google::protobuf::RepeatedPtrField< ::idleafk::ItemInfo >&
      drink() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .idleafk.ItemInfo dressCost = 4;
  bool has_dresscost() const;
  void clear_dresscost();
  static const int kDressCostFieldNumber = 4;
  const ::idleafk::ItemInfo& dresscost() const;
  ::idleafk::ItemInfo* release_dresscost();
  ::idleafk::ItemInfo* mutable_dresscost();
  void set_allocated_dresscost(::idleafk::ItemInfo* dresscost);

  // .idleafk.Identity iden = 3;
  void clear_iden();
  static const int kIdenFieldNumber = 3;
  ::idleafk::Identity iden() const;
  void set_iden(::idleafk::Identity value);

  // @@protoc_insertion_point(class_scope:idleafk.TotalData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> courses_;
  ::google::protobuf::RepeatedPtrField< ::idleafk::ItemInfo > drink_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::idleafk::ItemInfo* dresscost_;
  int iden_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsTotalDataImpl();
};
// -------------------------------------------------------------------

class TotalDataList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.TotalDataList) */ {
 public:
  TotalDataList();
  virtual ~TotalDataList();

  TotalDataList(const TotalDataList& from);

  inline TotalDataList& operator=(const TotalDataList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TotalDataList(TotalDataList&& from) noexcept
    : TotalDataList() {
    *this = ::std::move(from);
  }

  inline TotalDataList& operator=(TotalDataList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TotalDataList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TotalDataList* internal_default_instance() {
    return reinterpret_cast<const TotalDataList*>(
               &_TotalDataList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TotalDataList* other);
  friend void swap(TotalDataList& a, TotalDataList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TotalDataList* New() const PROTOBUF_FINAL { return New(NULL); }

  TotalDataList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TotalDataList& from);
  void MergeFrom(const TotalDataList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TotalDataList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .idleafk.TotalData rows = 1;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  const ::idleafk::TotalData& rows(int index) const;
  ::idleafk::TotalData* mutable_rows(int index);
  ::idleafk::TotalData* add_rows();
  ::google::protobuf::RepeatedPtrField< ::idleafk::TotalData >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::idleafk::TotalData >&
      rows() const;

  // @@protoc_insertion_point(class_scope:idleafk.TotalDataList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::idleafk::TotalData > rows_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsTotalDataListImpl();
};
// -------------------------------------------------------------------

class ItemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.ItemInfo) */ {
 public:
  ItemInfo();
  virtual ~ItemInfo();

  ItemInfo(const ItemInfo& from);

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemInfo(ItemInfo&& from) noexcept
    : ItemInfo() {
    *this = ::std::move(from);
  }

  inline ItemInfo& operator=(ItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemInfo* internal_default_instance() {
    return reinterpret_cast<const ItemInfo*>(
               &_ItemInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ItemInfo* other);
  friend void swap(ItemInfo& a, ItemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ItemInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ItemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string itemId = 1;
  void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  const ::std::string& itemid() const;
  void set_itemid(const ::std::string& value);
  #if LANG_CXX11
  void set_itemid(::std::string&& value);
  #endif
  void set_itemid(const char* value);
  void set_itemid(const char* value, size_t size);
  ::std::string* mutable_itemid();
  ::std::string* release_itemid();
  void set_allocated_itemid(::std::string* itemid);

  // uint32 itemCount = 2;
  void clear_itemcount();
  static const int kItemCountFieldNumber = 2;
  ::google::protobuf::uint32 itemcount() const;
  void set_itemcount(::google::protobuf::uint32 value);

  // bool isPayed = 3;
  void clear_ispayed();
  static const int kIsPayedFieldNumber = 3;
  bool ispayed() const;
  void set_ispayed(bool value);

  // @@protoc_insertion_point(class_scope:idleafk.ItemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr itemid_;
  ::google::protobuf::uint32 itemcount_;
  bool ispayed_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsItemInfoImpl();
};
// -------------------------------------------------------------------

class Region : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.Region) */ {
 public:
  Region();
  virtual ~Region();

  Region(const Region& from);

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(Region&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Region* other);
  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const PROTOBUF_FINAL { return New(NULL); }

  Region* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Region* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float forward = 2;
  int forward_size() const;
  void clear_forward();
  static const int kForwardFieldNumber = 2;
  float forward(int index) const;
  void set_forward(int index, float value);
  void add_forward(float value);
  const ::google::protobuf::RepeatedField< float >&
      forward() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_forward();

  // repeated float mid = 3;
  int mid_size() const;
  void clear_mid();
  static const int kMidFieldNumber = 3;
  float mid(int index) const;
  void set_mid(int index, float value);
  void add_mid(float value);
  const ::google::protobuf::RepeatedField< float >&
      mid() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mid();

  // repeated float back = 4;
  int back_size() const;
  void clear_back();
  static const int kBackFieldNumber = 4;
  float back(int index) const;
  void set_back(int index, float value);
  void add_back(float value);
  const ::google::protobuf::RepeatedField< float >&
      back() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_back();

  // sint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:idleafk.Region)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > forward_;
  mutable int _forward_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > mid_;
  mutable int _mid_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > back_;
  mutable int _back_cached_byte_size_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsRegionImpl();
};
// -------------------------------------------------------------------

class RegionList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.RegionList) */ {
 public:
  RegionList();
  virtual ~RegionList();

  RegionList(const RegionList& from);

  inline RegionList& operator=(const RegionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionList(RegionList&& from) noexcept
    : RegionList() {
    *this = ::std::move(from);
  }

  inline RegionList& operator=(RegionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionList* internal_default_instance() {
    return reinterpret_cast<const RegionList*>(
               &_RegionList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RegionList* other);
  friend void swap(RegionList& a, RegionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionList* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionList& from);
  void MergeFrom(const RegionList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .idleafk.Region rows = 1;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  const ::idleafk::Region& rows(int index) const;
  ::idleafk::Region* mutable_rows(int index);
  ::idleafk::Region* add_rows();
  ::google::protobuf::RepeatedPtrField< ::idleafk::Region >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::idleafk::Region >&
      rows() const;

  // @@protoc_insertion_point(class_scope:idleafk.RegionList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::idleafk::Region > rows_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsRegionListImpl();
};
// -------------------------------------------------------------------

class MatchParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.MatchParam) */ {
 public:
  MatchParam();
  virtual ~MatchParam();

  MatchParam(const MatchParam& from);

  inline MatchParam& operator=(const MatchParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchParam(MatchParam&& from) noexcept
    : MatchParam() {
    *this = ::std::move(from);
  }

  inline MatchParam& operator=(MatchParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchParam* internal_default_instance() {
    return reinterpret_cast<const MatchParam*>(
               &_MatchParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(MatchParam* other);
  friend void swap(MatchParam& a, MatchParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchParam* New() const PROTOBUF_FINAL { return New(NULL); }

  MatchParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MatchParam& from);
  void MergeFrom(const MatchParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MatchParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float intervalUpate = 1;
  void clear_intervalupate();
  static const int kIntervalUpateFieldNumber = 1;
  float intervalupate() const;
  void set_intervalupate(float value);

  // sint32 defendPlayerNum = 2;
  void clear_defendplayernum();
  static const int kDefendPlayerNumFieldNumber = 2;
  ::google::protobuf::int32 defendplayernum() const;
  void set_defendplayernum(::google::protobuf::int32 value);

  // float ignoreDist = 3;
  void clear_ignoredist();
  static const int kIgnoreDistFieldNumber = 3;
  float ignoredist() const;
  void set_ignoredist(float value);

  // float ballOwnRange = 4;
  void clear_ballownrange();
  static const int kBallOwnRangeFieldNumber = 4;
  float ballownrange() const;
  void set_ballownrange(float value);

  // float playerRadius = 5;
  void clear_playerradius();
  static const int kPlayerRadiusFieldNumber = 5;
  float playerradius() const;
  void set_playerradius(float value);

  // float grabRange = 6;
  void clear_grabrange();
  static const int kGrabRangeFieldNumber = 6;
  float grabrange() const;
  void set_grabrange(float value);

  // float ballMoveSpd = 7;
  void clear_ballmovespd();
  static const int kBallMoveSpdFieldNumber = 7;
  float ballmovespd() const;
  void set_ballmovespd(float value);

  // float width = 8;
  void clear_width();
  static const int kWidthFieldNumber = 8;
  float width() const;
  void set_width(float value);

  // float height = 9;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  float height() const;
  void set_height(float value);

  // float innerWidth = 10;
  void clear_innerwidth();
  static const int kInnerWidthFieldNumber = 10;
  float innerwidth() const;
  void set_innerwidth(float value);

  // float innerHeight = 11;
  void clear_innerheight();
  static const int kInnerHeightFieldNumber = 11;
  float innerheight() const;
  void set_innerheight(float value);

  // float outWidth = 12;
  void clear_outwidth();
  static const int kOutWidthFieldNumber = 12;
  float outwidth() const;
  void set_outwidth(float value);

  // float outHeight = 13;
  void clear_outheight();
  static const int kOutHeightFieldNumber = 13;
  float outheight() const;
  void set_outheight(float value);

  // float centerRadius = 14;
  void clear_centerradius();
  static const int kCenterRadiusFieldNumber = 14;
  float centerradius() const;
  void set_centerradius(float value);

  // float outRadius = 15;
  void clear_outradius();
  static const int kOutRadiusFieldNumber = 15;
  float outradius() const;
  void set_outradius(float value);

  // float pitchScale = 16;
  void clear_pitchscale();
  static const int kPitchScaleFieldNumber = 16;
  float pitchscale() const;
  void set_pitchscale(float value);

  // float widthSplit = 17;
  void clear_widthsplit();
  static const int kWidthSplitFieldNumber = 17;
  float widthsplit() const;
  void set_widthsplit(float value);

  // float heightSplit = 18;
  void clear_heightsplit();
  static const int kHeightSplitFieldNumber = 18;
  float heightsplit() const;
  void set_heightsplit(float value);

  // float verticalRange = 19;
  void clear_verticalrange();
  static const int kVerticalRangeFieldNumber = 19;
  float verticalrange() const;
  void set_verticalrange(float value);

  // float towardOffset = 20;
  void clear_towardoffset();
  static const int kTowardOffsetFieldNumber = 20;
  float towardoffset() const;
  void set_towardoffset(float value);

  // float propMaxNum = 21;
  void clear_propmaxnum();
  static const int kPropMaxNumFieldNumber = 21;
  float propmaxnum() const;
  void set_propmaxnum(float value);

  // float shootMin = 22;
  void clear_shootmin();
  static const int kShootMinFieldNumber = 22;
  float shootmin() const;
  void set_shootmin(float value);

  // float shootMax = 23;
  void clear_shootmax();
  static const int kShootMaxFieldNumber = 23;
  float shootmax() const;
  void set_shootmax(float value);

  // float dribbleMin = 24;
  void clear_dribblemin();
  static const int kDribbleMinFieldNumber = 24;
  float dribblemin() const;
  void set_dribblemin(float value);

  // float dribbleMax = 25;
  void clear_dribblemax();
  static const int kDribbleMaxFieldNumber = 25;
  float dribblemax() const;
  void set_dribblemax(float value);

  // float grabMin = 26;
  void clear_grabmin();
  static const int kGrabMinFieldNumber = 26;
  float grabmin() const;
  void set_grabmin(float value);

  // float grabMax = 27;
  void clear_grabmax();
  static const int kGrabMaxFieldNumber = 27;
  float grabmax() const;
  void set_grabmax(float value);

  // float disturbMin = 28;
  void clear_disturbmin();
  static const int kDisturbMinFieldNumber = 28;
  float disturbmin() const;
  void set_disturbmin(float value);

  // float disturbMax = 29;
  void clear_disturbmax();
  static const int kDisturbMaxFieldNumber = 29;
  float disturbmax() const;
  void set_disturbmax(float value);

  // float transferMin = 30;
  void clear_transfermin();
  static const int kTransferMinFieldNumber = 30;
  float transfermin() const;
  void set_transfermin(float value);

  // float transferMax = 31;
  void clear_transfermax();
  static const int kTransferMaxFieldNumber = 31;
  float transfermax() const;
  void set_transfermax(float value);

  // float lobshootMin = 32;
  void clear_lobshootmin();
  static const int kLobshootMinFieldNumber = 32;
  float lobshootmin() const;
  void set_lobshootmin(float value);

  // float lobshootMax = 33;
  void clear_lobshootmax();
  static const int kLobshootMaxFieldNumber = 33;
  float lobshootmax() const;
  void set_lobshootmax(float value);

  // float againstMin = 34;
  void clear_againstmin();
  static const int kAgainstMinFieldNumber = 34;
  float againstmin() const;
  void set_againstmin(float value);

  // float againstMax = 35;
  void clear_againstmax();
  static const int kAgainstMaxFieldNumber = 35;
  float againstmax() const;
  void set_againstmax(float value);

  // float healthMin = 36;
  void clear_healthmin();
  static const int kHealthMinFieldNumber = 36;
  float healthmin() const;
  void set_healthmin(float value);

  // float healthMax = 37;
  void clear_healthmax();
  static const int kHealthMaxFieldNumber = 37;
  float healthmax() const;
  void set_healthmax(float value);

  // float divingMin = 38;
  void clear_divingmin();
  static const int kDivingMinFieldNumber = 38;
  float divingmin() const;
  void set_divingmin(float value);

  // float divingMax = 39;
  void clear_divingmax();
  static const int kDivingMaxFieldNumber = 39;
  float divingmax() const;
  void set_divingmax(float value);

  // float runSpeed = 40;
  void clear_runspeed();
  static const int kRunSpeedFieldNumber = 40;
  float runspeed() const;
  void set_runspeed(float value);

  // @@protoc_insertion_point(class_scope:idleafk.MatchParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float intervalupate_;
  ::google::protobuf::int32 defendplayernum_;
  float ignoredist_;
  float ballownrange_;
  float playerradius_;
  float grabrange_;
  float ballmovespd_;
  float width_;
  float height_;
  float innerwidth_;
  float innerheight_;
  float outwidth_;
  float outheight_;
  float centerradius_;
  float outradius_;
  float pitchscale_;
  float widthsplit_;
  float heightsplit_;
  float verticalrange_;
  float towardoffset_;
  float propmaxnum_;
  float shootmin_;
  float shootmax_;
  float dribblemin_;
  float dribblemax_;
  float grabmin_;
  float grabmax_;
  float disturbmin_;
  float disturbmax_;
  float transfermin_;
  float transfermax_;
  float lobshootmin_;
  float lobshootmax_;
  float againstmin_;
  float againstmax_;
  float healthmin_;
  float healthmax_;
  float divingmin_;
  float divingmax_;
  float runspeed_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsMatchParamImpl();
};
// -------------------------------------------------------------------

class MatchParamList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idleafk.MatchParamList) */ {
 public:
  MatchParamList();
  virtual ~MatchParamList();

  MatchParamList(const MatchParamList& from);

  inline MatchParamList& operator=(const MatchParamList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchParamList(MatchParamList&& from) noexcept
    : MatchParamList() {
    *this = ::std::move(from);
  }

  inline MatchParamList& operator=(MatchParamList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchParamList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchParamList* internal_default_instance() {
    return reinterpret_cast<const MatchParamList*>(
               &_MatchParamList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(MatchParamList* other);
  friend void swap(MatchParamList& a, MatchParamList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchParamList* New() const PROTOBUF_FINAL { return New(NULL); }

  MatchParamList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MatchParamList& from);
  void MergeFrom(const MatchParamList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MatchParamList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .idleafk.MatchParam rows = 1;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  const ::idleafk::MatchParam& rows(int index) const;
  ::idleafk::MatchParam* mutable_rows(int index);
  ::idleafk::MatchParam* add_rows();
  ::google::protobuf::RepeatedPtrField< ::idleafk::MatchParam >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::idleafk::MatchParam >&
      rows() const;

  // @@protoc_insertion_point(class_scope:idleafk.MatchParamList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::idleafk::MatchParam > rows_;
  mutable int _cached_size_;
  friend struct ::protobuf_game_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_game_5fconfig_2eproto::InitDefaultsMatchParamListImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Formation

// sint32 id = 1;
inline void Formation::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Formation::id() const {
  // @@protoc_insertion_point(field_get:idleafk.Formation.id)
  return id_;
}
inline void Formation::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Formation.id)
}

// sint32 pos = 2;
inline void Formation::clear_pos() {
  pos_ = 0;
}
inline ::google::protobuf::int32 Formation::pos() const {
  // @@protoc_insertion_point(field_get:idleafk.Formation.pos)
  return pos_;
}
inline void Formation::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Formation.pos)
}

// sint32 type = 3;
inline void Formation::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Formation::type() const {
  // @@protoc_insertion_point(field_get:idleafk.Formation.type)
  return type_;
}
inline void Formation::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Formation.type)
}

// sint32 identity = 4;
inline void Formation::clear_identity() {
  identity_ = 0;
}
inline ::google::protobuf::int32 Formation::identity() const {
  // @@protoc_insertion_point(field_get:idleafk.Formation.identity)
  return identity_;
}
inline void Formation::set_identity(::google::protobuf::int32 value) {
  
  identity_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Formation.identity)
}

// repeated float kickOffPos = 5;
inline int Formation::kickoffpos_size() const {
  return kickoffpos_.size();
}
inline void Formation::clear_kickoffpos() {
  kickoffpos_.Clear();
}
inline float Formation::kickoffpos(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.Formation.kickOffPos)
  return kickoffpos_.Get(index);
}
inline void Formation::set_kickoffpos(int index, float value) {
  kickoffpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:idleafk.Formation.kickOffPos)
}
inline void Formation::add_kickoffpos(float value) {
  kickoffpos_.Add(value);
  // @@protoc_insertion_point(field_add:idleafk.Formation.kickOffPos)
}
inline const ::google::protobuf::RepeatedField< float >&
Formation::kickoffpos() const {
  // @@protoc_insertion_point(field_list:idleafk.Formation.kickOffPos)
  return kickoffpos_;
}
inline ::google::protobuf::RepeatedField< float >*
Formation::mutable_kickoffpos() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.Formation.kickOffPos)
  return &kickoffpos_;
}

// repeated float minPos = 6;
inline int Formation::minpos_size() const {
  return minpos_.size();
}
inline void Formation::clear_minpos() {
  minpos_.Clear();
}
inline float Formation::minpos(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.Formation.minPos)
  return minpos_.Get(index);
}
inline void Formation::set_minpos(int index, float value) {
  minpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:idleafk.Formation.minPos)
}
inline void Formation::add_minpos(float value) {
  minpos_.Add(value);
  // @@protoc_insertion_point(field_add:idleafk.Formation.minPos)
}
inline const ::google::protobuf::RepeatedField< float >&
Formation::minpos() const {
  // @@protoc_insertion_point(field_list:idleafk.Formation.minPos)
  return minpos_;
}
inline ::google::protobuf::RepeatedField< float >*
Formation::mutable_minpos() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.Formation.minPos)
  return &minpos_;
}

// repeated float maxPos = 7;
inline int Formation::maxpos_size() const {
  return maxpos_.size();
}
inline void Formation::clear_maxpos() {
  maxpos_.Clear();
}
inline float Formation::maxpos(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.Formation.maxPos)
  return maxpos_.Get(index);
}
inline void Formation::set_maxpos(int index, float value) {
  maxpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:idleafk.Formation.maxPos)
}
inline void Formation::add_maxpos(float value) {
  maxpos_.Add(value);
  // @@protoc_insertion_point(field_add:idleafk.Formation.maxPos)
}
inline const ::google::protobuf::RepeatedField< float >&
Formation::maxpos() const {
  // @@protoc_insertion_point(field_list:idleafk.Formation.maxPos)
  return maxpos_;
}
inline ::google::protobuf::RepeatedField< float >*
Formation::mutable_maxpos() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.Formation.maxPos)
  return &maxpos_;
}

// -------------------------------------------------------------------

// FormationList

// repeated .idleafk.Formation rows = 1;
inline int FormationList::rows_size() const {
  return rows_.size();
}
inline void FormationList::clear_rows() {
  rows_.Clear();
}
inline const ::idleafk::Formation& FormationList::rows(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.FormationList.rows)
  return rows_.Get(index);
}
inline ::idleafk::Formation* FormationList::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:idleafk.FormationList.rows)
  return rows_.Mutable(index);
}
inline ::idleafk::Formation* FormationList::add_rows() {
  // @@protoc_insertion_point(field_add:idleafk.FormationList.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idleafk::Formation >*
FormationList::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.FormationList.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idleafk::Formation >&
FormationList::rows() const {
  // @@protoc_insertion_point(field_list:idleafk.FormationList.rows)
  return rows_;
}

// -------------------------------------------------------------------

// Item

// sint32 id = 1;
inline void Item::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Item::id() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.id)
  return id_;
}
inline void Item::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.id)
}

// string name = 2;
inline void Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::name() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.name)
  return name_.GetNoArena();
}
inline void Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.Item.name)
}
#if LANG_CXX11
inline void Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.Item.name)
}
#endif
inline void Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.Item.name)
}
inline void Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.Item.name)
}
inline ::std::string* Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_name() {
  // @@protoc_insertion_point(field_release:idleafk.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:idleafk.Item.name)
}

// string title = 3;
inline void Item::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::title() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.title)
  return title_.GetNoArena();
}
inline void Item::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.Item.title)
}
#if LANG_CXX11
inline void Item::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.Item.title)
}
#endif
inline void Item::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.Item.title)
}
inline void Item::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.Item.title)
}
inline ::std::string* Item::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.Item.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_title() {
  // @@protoc_insertion_point(field_release:idleafk.Item.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:idleafk.Item.title)
}

// string des = 4;
inline void Item::clear_des() {
  des_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::des() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.des)
  return des_.GetNoArena();
}
inline void Item::set_des(const ::std::string& value) {
  
  des_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.Item.des)
}
#if LANG_CXX11
inline void Item::set_des(::std::string&& value) {
  
  des_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.Item.des)
}
#endif
inline void Item::set_des(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  des_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.Item.des)
}
inline void Item::set_des(const char* value, size_t size) {
  
  des_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.Item.des)
}
inline ::std::string* Item::mutable_des() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.Item.des)
  return des_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_des() {
  // @@protoc_insertion_point(field_release:idleafk.Item.des)
  
  return des_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_des(::std::string* des) {
  if (des != NULL) {
    
  } else {
    
  }
  des_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), des);
  // @@protoc_insertion_point(field_set_allocated:idleafk.Item.des)
}

// sint32 itemType = 5;
inline void Item::clear_itemtype() {
  itemtype_ = 0;
}
inline ::google::protobuf::int32 Item::itemtype() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.itemType)
  return itemtype_;
}
inline void Item::set_itemtype(::google::protobuf::int32 value) {
  
  itemtype_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.itemType)
}

// sint32 bagType = 6;
inline void Item::clear_bagtype() {
  bagtype_ = 0;
}
inline ::google::protobuf::int32 Item::bagtype() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.bagType)
  return bagtype_;
}
inline void Item::set_bagtype(::google::protobuf::int32 value) {
  
  bagtype_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.bagType)
}

// sint32 flyIcon = 7;
inline void Item::clear_flyicon() {
  flyicon_ = 0;
}
inline ::google::protobuf::int32 Item::flyicon() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.flyIcon)
  return flyicon_;
}
inline void Item::set_flyicon(::google::protobuf::int32 value) {
  
  flyicon_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.flyIcon)
}

// sint32 quality = 8;
inline void Item::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 Item::quality() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.quality)
  return quality_;
}
inline void Item::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.quality)
}

// sint32 sort = 9;
inline void Item::clear_sort() {
  sort_ = 0;
}
inline ::google::protobuf::int32 Item::sort() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.sort)
  return sort_;
}
inline void Item::set_sort(::google::protobuf::int32 value) {
  
  sort_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.sort)
}

// string iconRes = 10;
inline void Item::clear_iconres() {
  iconres_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::iconres() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.iconRes)
  return iconres_.GetNoArena();
}
inline void Item::set_iconres(const ::std::string& value) {
  
  iconres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.Item.iconRes)
}
#if LANG_CXX11
inline void Item::set_iconres(::std::string&& value) {
  
  iconres_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.Item.iconRes)
}
#endif
inline void Item::set_iconres(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  iconres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.Item.iconRes)
}
inline void Item::set_iconres(const char* value, size_t size) {
  
  iconres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.Item.iconRes)
}
inline ::std::string* Item::mutable_iconres() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.Item.iconRes)
  return iconres_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_iconres() {
  // @@protoc_insertion_point(field_release:idleafk.Item.iconRes)
  
  return iconres_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_iconres(::std::string* iconres) {
  if (iconres != NULL) {
    
  } else {
    
  }
  iconres_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconres);
  // @@protoc_insertion_point(field_set_allocated:idleafk.Item.iconRes)
}

// string iconBottomRes = 11;
inline void Item::clear_iconbottomres() {
  iconbottomres_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::iconbottomres() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.iconBottomRes)
  return iconbottomres_.GetNoArena();
}
inline void Item::set_iconbottomres(const ::std::string& value) {
  
  iconbottomres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.Item.iconBottomRes)
}
#if LANG_CXX11
inline void Item::set_iconbottomres(::std::string&& value) {
  
  iconbottomres_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.Item.iconBottomRes)
}
#endif
inline void Item::set_iconbottomres(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  iconbottomres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.Item.iconBottomRes)
}
inline void Item::set_iconbottomres(const char* value, size_t size) {
  
  iconbottomres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.Item.iconBottomRes)
}
inline ::std::string* Item::mutable_iconbottomres() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.Item.iconBottomRes)
  return iconbottomres_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_iconbottomres() {
  // @@protoc_insertion_point(field_release:idleafk.Item.iconBottomRes)
  
  return iconbottomres_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_iconbottomres(::std::string* iconbottomres) {
  if (iconbottomres != NULL) {
    
  } else {
    
  }
  iconbottomres_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconbottomres);
  // @@protoc_insertion_point(field_set_allocated:idleafk.Item.iconBottomRes)
}

// string miniIconRes = 12;
inline void Item::clear_miniiconres() {
  miniiconres_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::miniiconres() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.miniIconRes)
  return miniiconres_.GetNoArena();
}
inline void Item::set_miniiconres(const ::std::string& value) {
  
  miniiconres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.Item.miniIconRes)
}
#if LANG_CXX11
inline void Item::set_miniiconres(::std::string&& value) {
  
  miniiconres_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.Item.miniIconRes)
}
#endif
inline void Item::set_miniiconres(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  miniiconres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.Item.miniIconRes)
}
inline void Item::set_miniiconres(const char* value, size_t size) {
  
  miniiconres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.Item.miniIconRes)
}
inline ::std::string* Item::mutable_miniiconres() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.Item.miniIconRes)
  return miniiconres_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_miniiconres() {
  // @@protoc_insertion_point(field_release:idleafk.Item.miniIconRes)
  
  return miniiconres_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_miniiconres(::std::string* miniiconres) {
  if (miniiconres != NULL) {
    
  } else {
    
  }
  miniiconres_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), miniiconres);
  // @@protoc_insertion_point(field_set_allocated:idleafk.Item.miniIconRes)
}

// string battleIconRes = 13;
inline void Item::clear_battleiconres() {
  battleiconres_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::battleiconres() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.battleIconRes)
  return battleiconres_.GetNoArena();
}
inline void Item::set_battleiconres(const ::std::string& value) {
  
  battleiconres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.Item.battleIconRes)
}
#if LANG_CXX11
inline void Item::set_battleiconres(::std::string&& value) {
  
  battleiconres_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.Item.battleIconRes)
}
#endif
inline void Item::set_battleiconres(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  battleiconres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.Item.battleIconRes)
}
inline void Item::set_battleiconres(const char* value, size_t size) {
  
  battleiconres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.Item.battleIconRes)
}
inline ::std::string* Item::mutable_battleiconres() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.Item.battleIconRes)
  return battleiconres_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_battleiconres() {
  // @@protoc_insertion_point(field_release:idleafk.Item.battleIconRes)
  
  return battleiconres_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_battleiconres(::std::string* battleiconres) {
  if (battleiconres != NULL) {
    
  } else {
    
  }
  battleiconres_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), battleiconres);
  // @@protoc_insertion_point(field_set_allocated:idleafk.Item.battleIconRes)
}

// string cornerRes = 14;
inline void Item::clear_cornerres() {
  cornerres_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::cornerres() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.cornerRes)
  return cornerres_.GetNoArena();
}
inline void Item::set_cornerres(const ::std::string& value) {
  
  cornerres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.Item.cornerRes)
}
#if LANG_CXX11
inline void Item::set_cornerres(::std::string&& value) {
  
  cornerres_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.Item.cornerRes)
}
#endif
inline void Item::set_cornerres(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cornerres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.Item.cornerRes)
}
inline void Item::set_cornerres(const char* value, size_t size) {
  
  cornerres_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.Item.cornerRes)
}
inline ::std::string* Item::mutable_cornerres() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.Item.cornerRes)
  return cornerres_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_cornerres() {
  // @@protoc_insertion_point(field_release:idleafk.Item.cornerRes)
  
  return cornerres_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_cornerres(::std::string* cornerres) {
  if (cornerres != NULL) {
    
  } else {
    
  }
  cornerres_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cornerres);
  // @@protoc_insertion_point(field_set_allocated:idleafk.Item.cornerRes)
}

// sint32 stack = 15;
inline void Item::clear_stack() {
  stack_ = 0;
}
inline ::google::protobuf::int32 Item::stack() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.stack)
  return stack_;
}
inline void Item::set_stack(::google::protobuf::int32 value) {
  
  stack_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.stack)
}

// sint32 relationID = 16;
inline void Item::clear_relationid() {
  relationid_ = 0;
}
inline ::google::protobuf::int32 Item::relationid() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.relationID)
  return relationid_;
}
inline void Item::set_relationid(::google::protobuf::int32 value) {
  
  relationid_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.relationID)
}

// repeated sint32 equipmentExp = 17;
inline int Item::equipmentexp_size() const {
  return equipmentexp_.size();
}
inline void Item::clear_equipmentexp() {
  equipmentexp_.Clear();
}
inline ::google::protobuf::int32 Item::equipmentexp(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.Item.equipmentExp)
  return equipmentexp_.Get(index);
}
inline void Item::set_equipmentexp(int index, ::google::protobuf::int32 value) {
  equipmentexp_.Set(index, value);
  // @@protoc_insertion_point(field_set:idleafk.Item.equipmentExp)
}
inline void Item::add_equipmentexp(::google::protobuf::int32 value) {
  equipmentexp_.Add(value);
  // @@protoc_insertion_point(field_add:idleafk.Item.equipmentExp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::equipmentexp() const {
  // @@protoc_insertion_point(field_list:idleafk.Item.equipmentExp)
  return equipmentexp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_equipmentexp() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.Item.equipmentExp)
  return &equipmentexp_;
}

// repeated sint32 idleRewardId = 18;
inline int Item::idlerewardid_size() const {
  return idlerewardid_.size();
}
inline void Item::clear_idlerewardid() {
  idlerewardid_.Clear();
}
inline ::google::protobuf::int32 Item::idlerewardid(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.Item.idleRewardId)
  return idlerewardid_.Get(index);
}
inline void Item::set_idlerewardid(int index, ::google::protobuf::int32 value) {
  idlerewardid_.Set(index, value);
  // @@protoc_insertion_point(field_set:idleafk.Item.idleRewardId)
}
inline void Item::add_idlerewardid(::google::protobuf::int32 value) {
  idlerewardid_.Add(value);
  // @@protoc_insertion_point(field_add:idleafk.Item.idleRewardId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::idlerewardid() const {
  // @@protoc_insertion_point(field_list:idleafk.Item.idleRewardId)
  return idlerewardid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_idlerewardid() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.Item.idleRewardId)
  return &idlerewardid_;
}

// sint32 idleRewardTime = 19;
inline void Item::clear_idlerewardtime() {
  idlerewardtime_ = 0;
}
inline ::google::protobuf::int32 Item::idlerewardtime() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.idleRewardTime)
  return idlerewardtime_;
}
inline void Item::set_idlerewardtime(::google::protobuf::int32 value) {
  
  idlerewardtime_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.idleRewardTime)
}

// sint32 idleRewardVip = 20;
inline void Item::clear_idlerewardvip() {
  idlerewardvip_ = 0;
}
inline ::google::protobuf::int32 Item::idlerewardvip() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.idleRewardVip)
  return idlerewardvip_;
}
inline void Item::set_idlerewardvip(::google::protobuf::int32 value) {
  
  idlerewardvip_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.idleRewardVip)
}

// repeated sint32 giftReward = 21;
inline int Item::giftreward_size() const {
  return giftreward_.size();
}
inline void Item::clear_giftreward() {
  giftreward_.Clear();
}
inline ::google::protobuf::int32 Item::giftreward(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.Item.giftReward)
  return giftreward_.Get(index);
}
inline void Item::set_giftreward(int index, ::google::protobuf::int32 value) {
  giftreward_.Set(index, value);
  // @@protoc_insertion_point(field_set:idleafk.Item.giftReward)
}
inline void Item::add_giftreward(::google::protobuf::int32 value) {
  giftreward_.Add(value);
  // @@protoc_insertion_point(field_add:idleafk.Item.giftReward)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::giftreward() const {
  // @@protoc_insertion_point(field_list:idleafk.Item.giftReward)
  return giftreward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_giftreward() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.Item.giftReward)
  return &giftreward_;
}

// sint32 dropBag = 22;
inline void Item::clear_dropbag() {
  dropbag_ = 0;
}
inline ::google::protobuf::int32 Item::dropbag() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.dropBag)
  return dropbag_;
}
inline void Item::set_dropbag(::google::protobuf::int32 value) {
  
  dropbag_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.dropBag)
}

// sint32 synthesizeNum = 23;
inline void Item::clear_synthesizenum() {
  synthesizenum_ = 0;
}
inline ::google::protobuf::int32 Item::synthesizenum() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.synthesizeNum)
  return synthesizenum_;
}
inline void Item::set_synthesizenum(::google::protobuf::int32 value) {
  
  synthesizenum_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.synthesizeNum)
}

// sint32 synthesizeDropBag = 24;
inline void Item::clear_synthesizedropbag() {
  synthesizedropbag_ = 0;
}
inline ::google::protobuf::int32 Item::synthesizedropbag() const {
  // @@protoc_insertion_point(field_get:idleafk.Item.synthesizeDropBag)
  return synthesizedropbag_;
}
inline void Item::set_synthesizedropbag(::google::protobuf::int32 value) {
  
  synthesizedropbag_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Item.synthesizeDropBag)
}

// -------------------------------------------------------------------

// ItemList

// repeated .idleafk.Item rows = 1;
inline int ItemList::rows_size() const {
  return rows_.size();
}
inline void ItemList::clear_rows() {
  rows_.Clear();
}
inline const ::idleafk::Item& ItemList::rows(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.ItemList.rows)
  return rows_.Get(index);
}
inline ::idleafk::Item* ItemList::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:idleafk.ItemList.rows)
  return rows_.Mutable(index);
}
inline ::idleafk::Item* ItemList::add_rows() {
  // @@protoc_insertion_point(field_add:idleafk.ItemList.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idleafk::Item >*
ItemList::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.ItemList.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idleafk::Item >&
ItemList::rows() const {
  // @@protoc_insertion_point(field_list:idleafk.ItemList.rows)
  return rows_;
}

// -------------------------------------------------------------------

// TotalData

// string name = 1;
inline void TotalData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TotalData::name() const {
  // @@protoc_insertion_point(field_get:idleafk.TotalData.name)
  return name_.GetNoArena();
}
inline void TotalData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.TotalData.name)
}
#if LANG_CXX11
inline void TotalData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.TotalData.name)
}
#endif
inline void TotalData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.TotalData.name)
}
inline void TotalData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.TotalData.name)
}
inline ::std::string* TotalData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.TotalData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TotalData::release_name() {
  // @@protoc_insertion_point(field_release:idleafk.TotalData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TotalData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:idleafk.TotalData.name)
}

// repeated string courses = 2;
inline int TotalData::courses_size() const {
  return courses_.size();
}
inline void TotalData::clear_courses() {
  courses_.Clear();
}
inline const ::std::string& TotalData::courses(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.TotalData.courses)
  return courses_.Get(index);
}
inline ::std::string* TotalData::mutable_courses(int index) {
  // @@protoc_insertion_point(field_mutable:idleafk.TotalData.courses)
  return courses_.Mutable(index);
}
inline void TotalData::set_courses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:idleafk.TotalData.courses)
  courses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TotalData::set_courses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:idleafk.TotalData.courses)
  courses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TotalData::set_courses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  courses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:idleafk.TotalData.courses)
}
inline void TotalData::set_courses(int index, const char* value, size_t size) {
  courses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:idleafk.TotalData.courses)
}
inline ::std::string* TotalData::add_courses() {
  // @@protoc_insertion_point(field_add_mutable:idleafk.TotalData.courses)
  return courses_.Add();
}
inline void TotalData::add_courses(const ::std::string& value) {
  courses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:idleafk.TotalData.courses)
}
#if LANG_CXX11
inline void TotalData::add_courses(::std::string&& value) {
  courses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:idleafk.TotalData.courses)
}
#endif
inline void TotalData::add_courses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  courses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:idleafk.TotalData.courses)
}
inline void TotalData::add_courses(const char* value, size_t size) {
  courses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:idleafk.TotalData.courses)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TotalData::courses() const {
  // @@protoc_insertion_point(field_list:idleafk.TotalData.courses)
  return courses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TotalData::mutable_courses() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.TotalData.courses)
  return &courses_;
}

// .idleafk.Identity iden = 3;
inline void TotalData::clear_iden() {
  iden_ = 0;
}
inline ::idleafk::Identity TotalData::iden() const {
  // @@protoc_insertion_point(field_get:idleafk.TotalData.iden)
  return static_cast< ::idleafk::Identity >(iden_);
}
inline void TotalData::set_iden(::idleafk::Identity value) {
  
  iden_ = value;
  // @@protoc_insertion_point(field_set:idleafk.TotalData.iden)
}

// .idleafk.ItemInfo dressCost = 4;
inline bool TotalData::has_dresscost() const {
  return this != internal_default_instance() && dresscost_ != NULL;
}
inline void TotalData::clear_dresscost() {
  if (GetArenaNoVirtual() == NULL && dresscost_ != NULL) {
    delete dresscost_;
  }
  dresscost_ = NULL;
}
inline const ::idleafk::ItemInfo& TotalData::dresscost() const {
  const ::idleafk::ItemInfo* p = dresscost_;
  // @@protoc_insertion_point(field_get:idleafk.TotalData.dressCost)
  return p != NULL ? *p : *reinterpret_cast<const ::idleafk::ItemInfo*>(
      &::idleafk::_ItemInfo_default_instance_);
}
inline ::idleafk::ItemInfo* TotalData::release_dresscost() {
  // @@protoc_insertion_point(field_release:idleafk.TotalData.dressCost)
  
  ::idleafk::ItemInfo* temp = dresscost_;
  dresscost_ = NULL;
  return temp;
}
inline ::idleafk::ItemInfo* TotalData::mutable_dresscost() {
  
  if (dresscost_ == NULL) {
    dresscost_ = new ::idleafk::ItemInfo;
  }
  // @@protoc_insertion_point(field_mutable:idleafk.TotalData.dressCost)
  return dresscost_;
}
inline void TotalData::set_allocated_dresscost(::idleafk::ItemInfo* dresscost) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dresscost_;
  }
  if (dresscost) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dresscost = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dresscost, submessage_arena);
    }
    
  } else {
    
  }
  dresscost_ = dresscost;
  // @@protoc_insertion_point(field_set_allocated:idleafk.TotalData.dressCost)
}

// repeated .idleafk.ItemInfo drink = 5;
inline int TotalData::drink_size() const {
  return drink_.size();
}
inline void TotalData::clear_drink() {
  drink_.Clear();
}
inline const ::idleafk::ItemInfo& TotalData::drink(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.TotalData.drink)
  return drink_.Get(index);
}
inline ::idleafk::ItemInfo* TotalData::mutable_drink(int index) {
  // @@protoc_insertion_point(field_mutable:idleafk.TotalData.drink)
  return drink_.Mutable(index);
}
inline ::idleafk::ItemInfo* TotalData::add_drink() {
  // @@protoc_insertion_point(field_add:idleafk.TotalData.drink)
  return drink_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idleafk::ItemInfo >*
TotalData::mutable_drink() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.TotalData.drink)
  return &drink_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idleafk::ItemInfo >&
TotalData::drink() const {
  // @@protoc_insertion_point(field_list:idleafk.TotalData.drink)
  return drink_;
}

// -------------------------------------------------------------------

// TotalDataList

// repeated .idleafk.TotalData rows = 1;
inline int TotalDataList::rows_size() const {
  return rows_.size();
}
inline void TotalDataList::clear_rows() {
  rows_.Clear();
}
inline const ::idleafk::TotalData& TotalDataList::rows(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.TotalDataList.rows)
  return rows_.Get(index);
}
inline ::idleafk::TotalData* TotalDataList::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:idleafk.TotalDataList.rows)
  return rows_.Mutable(index);
}
inline ::idleafk::TotalData* TotalDataList::add_rows() {
  // @@protoc_insertion_point(field_add:idleafk.TotalDataList.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idleafk::TotalData >*
TotalDataList::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.TotalDataList.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idleafk::TotalData >&
TotalDataList::rows() const {
  // @@protoc_insertion_point(field_list:idleafk.TotalDataList.rows)
  return rows_;
}

// -------------------------------------------------------------------

// ItemInfo

// string itemId = 1;
inline void ItemInfo::clear_itemid() {
  itemid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:idleafk.ItemInfo.itemId)
  return itemid_.GetNoArena();
}
inline void ItemInfo::set_itemid(const ::std::string& value) {
  
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idleafk.ItemInfo.itemId)
}
#if LANG_CXX11
inline void ItemInfo::set_itemid(::std::string&& value) {
  
  itemid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idleafk.ItemInfo.itemId)
}
#endif
inline void ItemInfo::set_itemid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idleafk.ItemInfo.itemId)
}
inline void ItemInfo::set_itemid(const char* value, size_t size) {
  
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idleafk.ItemInfo.itemId)
}
inline ::std::string* ItemInfo::mutable_itemid() {
  
  // @@protoc_insertion_point(field_mutable:idleafk.ItemInfo.itemId)
  return itemid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemInfo::release_itemid() {
  // @@protoc_insertion_point(field_release:idleafk.ItemInfo.itemId)
  
  return itemid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemInfo::set_allocated_itemid(::std::string* itemid) {
  if (itemid != NULL) {
    
  } else {
    
  }
  itemid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemid);
  // @@protoc_insertion_point(field_set_allocated:idleafk.ItemInfo.itemId)
}

// uint32 itemCount = 2;
inline void ItemInfo::clear_itemcount() {
  itemcount_ = 0u;
}
inline ::google::protobuf::uint32 ItemInfo::itemcount() const {
  // @@protoc_insertion_point(field_get:idleafk.ItemInfo.itemCount)
  return itemcount_;
}
inline void ItemInfo::set_itemcount(::google::protobuf::uint32 value) {
  
  itemcount_ = value;
  // @@protoc_insertion_point(field_set:idleafk.ItemInfo.itemCount)
}

// bool isPayed = 3;
inline void ItemInfo::clear_ispayed() {
  ispayed_ = false;
}
inline bool ItemInfo::ispayed() const {
  // @@protoc_insertion_point(field_get:idleafk.ItemInfo.isPayed)
  return ispayed_;
}
inline void ItemInfo::set_ispayed(bool value) {
  
  ispayed_ = value;
  // @@protoc_insertion_point(field_set:idleafk.ItemInfo.isPayed)
}

// -------------------------------------------------------------------

// Region

// sint32 id = 1;
inline void Region::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Region::id() const {
  // @@protoc_insertion_point(field_get:idleafk.Region.id)
  return id_;
}
inline void Region::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:idleafk.Region.id)
}

// repeated float forward = 2;
inline int Region::forward_size() const {
  return forward_.size();
}
inline void Region::clear_forward() {
  forward_.Clear();
}
inline float Region::forward(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.Region.forward)
  return forward_.Get(index);
}
inline void Region::set_forward(int index, float value) {
  forward_.Set(index, value);
  // @@protoc_insertion_point(field_set:idleafk.Region.forward)
}
inline void Region::add_forward(float value) {
  forward_.Add(value);
  // @@protoc_insertion_point(field_add:idleafk.Region.forward)
}
inline const ::google::protobuf::RepeatedField< float >&
Region::forward() const {
  // @@protoc_insertion_point(field_list:idleafk.Region.forward)
  return forward_;
}
inline ::google::protobuf::RepeatedField< float >*
Region::mutable_forward() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.Region.forward)
  return &forward_;
}

// repeated float mid = 3;
inline int Region::mid_size() const {
  return mid_.size();
}
inline void Region::clear_mid() {
  mid_.Clear();
}
inline float Region::mid(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.Region.mid)
  return mid_.Get(index);
}
inline void Region::set_mid(int index, float value) {
  mid_.Set(index, value);
  // @@protoc_insertion_point(field_set:idleafk.Region.mid)
}
inline void Region::add_mid(float value) {
  mid_.Add(value);
  // @@protoc_insertion_point(field_add:idleafk.Region.mid)
}
inline const ::google::protobuf::RepeatedField< float >&
Region::mid() const {
  // @@protoc_insertion_point(field_list:idleafk.Region.mid)
  return mid_;
}
inline ::google::protobuf::RepeatedField< float >*
Region::mutable_mid() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.Region.mid)
  return &mid_;
}

// repeated float back = 4;
inline int Region::back_size() const {
  return back_.size();
}
inline void Region::clear_back() {
  back_.Clear();
}
inline float Region::back(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.Region.back)
  return back_.Get(index);
}
inline void Region::set_back(int index, float value) {
  back_.Set(index, value);
  // @@protoc_insertion_point(field_set:idleafk.Region.back)
}
inline void Region::add_back(float value) {
  back_.Add(value);
  // @@protoc_insertion_point(field_add:idleafk.Region.back)
}
inline const ::google::protobuf::RepeatedField< float >&
Region::back() const {
  // @@protoc_insertion_point(field_list:idleafk.Region.back)
  return back_;
}
inline ::google::protobuf::RepeatedField< float >*
Region::mutable_back() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.Region.back)
  return &back_;
}

// -------------------------------------------------------------------

// RegionList

// repeated .idleafk.Region rows = 1;
inline int RegionList::rows_size() const {
  return rows_.size();
}
inline void RegionList::clear_rows() {
  rows_.Clear();
}
inline const ::idleafk::Region& RegionList::rows(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.RegionList.rows)
  return rows_.Get(index);
}
inline ::idleafk::Region* RegionList::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:idleafk.RegionList.rows)
  return rows_.Mutable(index);
}
inline ::idleafk::Region* RegionList::add_rows() {
  // @@protoc_insertion_point(field_add:idleafk.RegionList.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idleafk::Region >*
RegionList::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.RegionList.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idleafk::Region >&
RegionList::rows() const {
  // @@protoc_insertion_point(field_list:idleafk.RegionList.rows)
  return rows_;
}

// -------------------------------------------------------------------

// MatchParam

// float intervalUpate = 1;
inline void MatchParam::clear_intervalupate() {
  intervalupate_ = 0;
}
inline float MatchParam::intervalupate() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.intervalUpate)
  return intervalupate_;
}
inline void MatchParam::set_intervalupate(float value) {
  
  intervalupate_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.intervalUpate)
}

// sint32 defendPlayerNum = 2;
inline void MatchParam::clear_defendplayernum() {
  defendplayernum_ = 0;
}
inline ::google::protobuf::int32 MatchParam::defendplayernum() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.defendPlayerNum)
  return defendplayernum_;
}
inline void MatchParam::set_defendplayernum(::google::protobuf::int32 value) {
  
  defendplayernum_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.defendPlayerNum)
}

// float ignoreDist = 3;
inline void MatchParam::clear_ignoredist() {
  ignoredist_ = 0;
}
inline float MatchParam::ignoredist() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.ignoreDist)
  return ignoredist_;
}
inline void MatchParam::set_ignoredist(float value) {
  
  ignoredist_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.ignoreDist)
}

// float ballOwnRange = 4;
inline void MatchParam::clear_ballownrange() {
  ballownrange_ = 0;
}
inline float MatchParam::ballownrange() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.ballOwnRange)
  return ballownrange_;
}
inline void MatchParam::set_ballownrange(float value) {
  
  ballownrange_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.ballOwnRange)
}

// float playerRadius = 5;
inline void MatchParam::clear_playerradius() {
  playerradius_ = 0;
}
inline float MatchParam::playerradius() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.playerRadius)
  return playerradius_;
}
inline void MatchParam::set_playerradius(float value) {
  
  playerradius_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.playerRadius)
}

// float grabRange = 6;
inline void MatchParam::clear_grabrange() {
  grabrange_ = 0;
}
inline float MatchParam::grabrange() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.grabRange)
  return grabrange_;
}
inline void MatchParam::set_grabrange(float value) {
  
  grabrange_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.grabRange)
}

// float ballMoveSpd = 7;
inline void MatchParam::clear_ballmovespd() {
  ballmovespd_ = 0;
}
inline float MatchParam::ballmovespd() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.ballMoveSpd)
  return ballmovespd_;
}
inline void MatchParam::set_ballmovespd(float value) {
  
  ballmovespd_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.ballMoveSpd)
}

// float width = 8;
inline void MatchParam::clear_width() {
  width_ = 0;
}
inline float MatchParam::width() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.width)
  return width_;
}
inline void MatchParam::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.width)
}

// float height = 9;
inline void MatchParam::clear_height() {
  height_ = 0;
}
inline float MatchParam::height() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.height)
  return height_;
}
inline void MatchParam::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.height)
}

// float innerWidth = 10;
inline void MatchParam::clear_innerwidth() {
  innerwidth_ = 0;
}
inline float MatchParam::innerwidth() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.innerWidth)
  return innerwidth_;
}
inline void MatchParam::set_innerwidth(float value) {
  
  innerwidth_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.innerWidth)
}

// float innerHeight = 11;
inline void MatchParam::clear_innerheight() {
  innerheight_ = 0;
}
inline float MatchParam::innerheight() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.innerHeight)
  return innerheight_;
}
inline void MatchParam::set_innerheight(float value) {
  
  innerheight_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.innerHeight)
}

// float outWidth = 12;
inline void MatchParam::clear_outwidth() {
  outwidth_ = 0;
}
inline float MatchParam::outwidth() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.outWidth)
  return outwidth_;
}
inline void MatchParam::set_outwidth(float value) {
  
  outwidth_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.outWidth)
}

// float outHeight = 13;
inline void MatchParam::clear_outheight() {
  outheight_ = 0;
}
inline float MatchParam::outheight() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.outHeight)
  return outheight_;
}
inline void MatchParam::set_outheight(float value) {
  
  outheight_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.outHeight)
}

// float centerRadius = 14;
inline void MatchParam::clear_centerradius() {
  centerradius_ = 0;
}
inline float MatchParam::centerradius() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.centerRadius)
  return centerradius_;
}
inline void MatchParam::set_centerradius(float value) {
  
  centerradius_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.centerRadius)
}

// float outRadius = 15;
inline void MatchParam::clear_outradius() {
  outradius_ = 0;
}
inline float MatchParam::outradius() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.outRadius)
  return outradius_;
}
inline void MatchParam::set_outradius(float value) {
  
  outradius_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.outRadius)
}

// float pitchScale = 16;
inline void MatchParam::clear_pitchscale() {
  pitchscale_ = 0;
}
inline float MatchParam::pitchscale() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.pitchScale)
  return pitchscale_;
}
inline void MatchParam::set_pitchscale(float value) {
  
  pitchscale_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.pitchScale)
}

// float widthSplit = 17;
inline void MatchParam::clear_widthsplit() {
  widthsplit_ = 0;
}
inline float MatchParam::widthsplit() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.widthSplit)
  return widthsplit_;
}
inline void MatchParam::set_widthsplit(float value) {
  
  widthsplit_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.widthSplit)
}

// float heightSplit = 18;
inline void MatchParam::clear_heightsplit() {
  heightsplit_ = 0;
}
inline float MatchParam::heightsplit() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.heightSplit)
  return heightsplit_;
}
inline void MatchParam::set_heightsplit(float value) {
  
  heightsplit_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.heightSplit)
}

// float verticalRange = 19;
inline void MatchParam::clear_verticalrange() {
  verticalrange_ = 0;
}
inline float MatchParam::verticalrange() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.verticalRange)
  return verticalrange_;
}
inline void MatchParam::set_verticalrange(float value) {
  
  verticalrange_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.verticalRange)
}

// float towardOffset = 20;
inline void MatchParam::clear_towardoffset() {
  towardoffset_ = 0;
}
inline float MatchParam::towardoffset() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.towardOffset)
  return towardoffset_;
}
inline void MatchParam::set_towardoffset(float value) {
  
  towardoffset_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.towardOffset)
}

// float propMaxNum = 21;
inline void MatchParam::clear_propmaxnum() {
  propmaxnum_ = 0;
}
inline float MatchParam::propmaxnum() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.propMaxNum)
  return propmaxnum_;
}
inline void MatchParam::set_propmaxnum(float value) {
  
  propmaxnum_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.propMaxNum)
}

// float shootMin = 22;
inline void MatchParam::clear_shootmin() {
  shootmin_ = 0;
}
inline float MatchParam::shootmin() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.shootMin)
  return shootmin_;
}
inline void MatchParam::set_shootmin(float value) {
  
  shootmin_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.shootMin)
}

// float shootMax = 23;
inline void MatchParam::clear_shootmax() {
  shootmax_ = 0;
}
inline float MatchParam::shootmax() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.shootMax)
  return shootmax_;
}
inline void MatchParam::set_shootmax(float value) {
  
  shootmax_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.shootMax)
}

// float dribbleMin = 24;
inline void MatchParam::clear_dribblemin() {
  dribblemin_ = 0;
}
inline float MatchParam::dribblemin() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.dribbleMin)
  return dribblemin_;
}
inline void MatchParam::set_dribblemin(float value) {
  
  dribblemin_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.dribbleMin)
}

// float dribbleMax = 25;
inline void MatchParam::clear_dribblemax() {
  dribblemax_ = 0;
}
inline float MatchParam::dribblemax() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.dribbleMax)
  return dribblemax_;
}
inline void MatchParam::set_dribblemax(float value) {
  
  dribblemax_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.dribbleMax)
}

// float grabMin = 26;
inline void MatchParam::clear_grabmin() {
  grabmin_ = 0;
}
inline float MatchParam::grabmin() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.grabMin)
  return grabmin_;
}
inline void MatchParam::set_grabmin(float value) {
  
  grabmin_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.grabMin)
}

// float grabMax = 27;
inline void MatchParam::clear_grabmax() {
  grabmax_ = 0;
}
inline float MatchParam::grabmax() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.grabMax)
  return grabmax_;
}
inline void MatchParam::set_grabmax(float value) {
  
  grabmax_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.grabMax)
}

// float disturbMin = 28;
inline void MatchParam::clear_disturbmin() {
  disturbmin_ = 0;
}
inline float MatchParam::disturbmin() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.disturbMin)
  return disturbmin_;
}
inline void MatchParam::set_disturbmin(float value) {
  
  disturbmin_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.disturbMin)
}

// float disturbMax = 29;
inline void MatchParam::clear_disturbmax() {
  disturbmax_ = 0;
}
inline float MatchParam::disturbmax() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.disturbMax)
  return disturbmax_;
}
inline void MatchParam::set_disturbmax(float value) {
  
  disturbmax_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.disturbMax)
}

// float transferMin = 30;
inline void MatchParam::clear_transfermin() {
  transfermin_ = 0;
}
inline float MatchParam::transfermin() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.transferMin)
  return transfermin_;
}
inline void MatchParam::set_transfermin(float value) {
  
  transfermin_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.transferMin)
}

// float transferMax = 31;
inline void MatchParam::clear_transfermax() {
  transfermax_ = 0;
}
inline float MatchParam::transfermax() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.transferMax)
  return transfermax_;
}
inline void MatchParam::set_transfermax(float value) {
  
  transfermax_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.transferMax)
}

// float lobshootMin = 32;
inline void MatchParam::clear_lobshootmin() {
  lobshootmin_ = 0;
}
inline float MatchParam::lobshootmin() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.lobshootMin)
  return lobshootmin_;
}
inline void MatchParam::set_lobshootmin(float value) {
  
  lobshootmin_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.lobshootMin)
}

// float lobshootMax = 33;
inline void MatchParam::clear_lobshootmax() {
  lobshootmax_ = 0;
}
inline float MatchParam::lobshootmax() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.lobshootMax)
  return lobshootmax_;
}
inline void MatchParam::set_lobshootmax(float value) {
  
  lobshootmax_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.lobshootMax)
}

// float againstMin = 34;
inline void MatchParam::clear_againstmin() {
  againstmin_ = 0;
}
inline float MatchParam::againstmin() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.againstMin)
  return againstmin_;
}
inline void MatchParam::set_againstmin(float value) {
  
  againstmin_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.againstMin)
}

// float againstMax = 35;
inline void MatchParam::clear_againstmax() {
  againstmax_ = 0;
}
inline float MatchParam::againstmax() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.againstMax)
  return againstmax_;
}
inline void MatchParam::set_againstmax(float value) {
  
  againstmax_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.againstMax)
}

// float healthMin = 36;
inline void MatchParam::clear_healthmin() {
  healthmin_ = 0;
}
inline float MatchParam::healthmin() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.healthMin)
  return healthmin_;
}
inline void MatchParam::set_healthmin(float value) {
  
  healthmin_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.healthMin)
}

// float healthMax = 37;
inline void MatchParam::clear_healthmax() {
  healthmax_ = 0;
}
inline float MatchParam::healthmax() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.healthMax)
  return healthmax_;
}
inline void MatchParam::set_healthmax(float value) {
  
  healthmax_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.healthMax)
}

// float divingMin = 38;
inline void MatchParam::clear_divingmin() {
  divingmin_ = 0;
}
inline float MatchParam::divingmin() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.divingMin)
  return divingmin_;
}
inline void MatchParam::set_divingmin(float value) {
  
  divingmin_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.divingMin)
}

// float divingMax = 39;
inline void MatchParam::clear_divingmax() {
  divingmax_ = 0;
}
inline float MatchParam::divingmax() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.divingMax)
  return divingmax_;
}
inline void MatchParam::set_divingmax(float value) {
  
  divingmax_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.divingMax)
}

// float runSpeed = 40;
inline void MatchParam::clear_runspeed() {
  runspeed_ = 0;
}
inline float MatchParam::runspeed() const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParam.runSpeed)
  return runspeed_;
}
inline void MatchParam::set_runspeed(float value) {
  
  runspeed_ = value;
  // @@protoc_insertion_point(field_set:idleafk.MatchParam.runSpeed)
}

// -------------------------------------------------------------------

// MatchParamList

// repeated .idleafk.MatchParam rows = 1;
inline int MatchParamList::rows_size() const {
  return rows_.size();
}
inline void MatchParamList::clear_rows() {
  rows_.Clear();
}
inline const ::idleafk::MatchParam& MatchParamList::rows(int index) const {
  // @@protoc_insertion_point(field_get:idleafk.MatchParamList.rows)
  return rows_.Get(index);
}
inline ::idleafk::MatchParam* MatchParamList::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:idleafk.MatchParamList.rows)
  return rows_.Mutable(index);
}
inline ::idleafk::MatchParam* MatchParamList::add_rows() {
  // @@protoc_insertion_point(field_add:idleafk.MatchParamList.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idleafk::MatchParam >*
MatchParamList::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:idleafk.MatchParamList.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idleafk::MatchParam >&
MatchParamList::rows() const {
  // @@protoc_insertion_point(field_list:idleafk.MatchParamList.rows)
  return rows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idleafk

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::idleafk::Identity> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idleafk::Identity>() {
  return ::idleafk::Identity_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fconfig_2eproto__INCLUDED
