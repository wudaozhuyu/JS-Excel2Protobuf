// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Idleafk {

  /// <summary>Holder for reflection information generated from game_config.proto</summary>
  public static partial class GameConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for game_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFnYW1lX2NvbmZpZy5wcm90bxIHaWRsZWFmayJ4CglGb3JtYXRpb24SCgoC",
            "aWQYASABKBESCwoDcG9zGAIgASgREgwKBHR5cGUYAyABKBESEAoIaWRlbnRp",
            "dHkYBCABKBESEgoKa2lja09mZlBvcxgFIAMoAhIOCgZtaW5Qb3MYBiADKAIS",
            "DgoGbWF4UG9zGAcgAygCIjEKDUZvcm1hdGlvbkxpc3QSIAoEcm93cxgBIAMo",
            "CzISLmlkbGVhZmsuRm9ybWF0aW9uIssDCgRJdGVtEgoKAmlkGAEgASgREgwK",
            "BG5hbWUYAiABKAkSDQoFdGl0bGUYAyABKAkSCwoDZGVzGAQgASgJEhAKCGl0",
            "ZW1UeXBlGAUgASgREg8KB2JhZ1R5cGUYBiABKBESDwoHZmx5SWNvbhgHIAEo",
            "ERIPCgdxdWFsaXR5GAggASgREgwKBHNvcnQYCSABKBESDwoHaWNvblJlcxgK",
            "IAEoCRIVCg1pY29uQm90dG9tUmVzGAsgASgJEhMKC21pbmlJY29uUmVzGAwg",
            "ASgJEhUKDWJhdHRsZUljb25SZXMYDSABKAkSEQoJY29ybmVyUmVzGA4gASgJ",
            "Eg0KBXN0YWNrGA8gASgREhIKCnJlbGF0aW9uSUQYECABKBESFAoMZXF1aXBt",
            "ZW50RXhwGBEgAygREhQKDGlkbGVSZXdhcmRJZBgSIAMoERIWCg5pZGxlUmV3",
            "YXJkVGltZRgTIAEoERIVCg1pZGxlUmV3YXJkVmlwGBQgASgREhIKCmdpZnRS",
            "ZXdhcmQYFSADKBESDwoHZHJvcEJhZxgWIAEoERIVCg1zeW50aGVzaXplTnVt",
            "GBcgASgREhkKEXN5bnRoZXNpemVEcm9wQmFnGBggASgRIicKCEl0ZW1MaXN0",
            "EhsKBHJvd3MYASADKAsyDS5pZGxlYWZrLkl0ZW0ikwEKCVRvdGFsRGF0YRIM",
            "CgRuYW1lGAEgASgJEg8KB2NvdXJzZXMYAiADKAkSHwoEaWRlbhgDIAEoDjIR",
            "LmlkbGVhZmsuSWRlbnRpdHkSJAoJZHJlc3NDb3N0GAQgASgLMhEuaWRsZWFm",
            "ay5JdGVtSW5mbxIgCgVkcmluaxgFIAMoCzIRLmlkbGVhZmsuSXRlbUluZm8i",
            "MQoNVG90YWxEYXRhTGlzdBIgCgRyb3dzGAEgAygLMhIuaWRsZWFmay5Ub3Rh",
            "bERhdGEiPgoISXRlbUluZm8SDgoGaXRlbUlkGAEgASgJEhEKCWl0ZW1Db3Vu",
            "dBgCIAEoDRIPCgdpc1BheWVkGAMgASgIIkAKBlJlZ2lvbhIKCgJpZBgBIAEo",
            "ERIPCgdmb3J3YXJkGAIgAygCEgsKA21pZBgDIAMoAhIMCgRiYWNrGAQgAygC",
            "IisKClJlZ2lvbkxpc3QSHQoEcm93cxgBIAMoCzIPLmlkbGVhZmsuUmVnaW9u",
            "IqgGCgpNYXRjaFBhcmFtEhUKDWludGVydmFsVXBhdGUYASABKAISFwoPZGVm",
            "ZW5kUGxheWVyTnVtGAIgASgREhIKCmlnbm9yZURpc3QYAyABKAISFAoMYmFs",
            "bE93blJhbmdlGAQgASgCEhQKDHBsYXllclJhZGl1cxgFIAEoAhIRCglncmFi",
            "UmFuZ2UYBiABKAISEwoLYmFsbE1vdmVTcGQYByABKAISDQoFd2lkdGgYCCAB",
            "KAISDgoGaGVpZ2h0GAkgASgCEhIKCmlubmVyV2lkdGgYCiABKAISEwoLaW5u",
            "ZXJIZWlnaHQYCyABKAISEAoIb3V0V2lkdGgYDCABKAISEQoJb3V0SGVpZ2h0",
            "GA0gASgCEhQKDGNlbnRlclJhZGl1cxgOIAEoAhIRCglvdXRSYWRpdXMYDyAB",
            "KAISEgoKcGl0Y2hTY2FsZRgQIAEoAhISCgp3aWR0aFNwbGl0GBEgASgCEhMK",
            "C2hlaWdodFNwbGl0GBIgASgCEhUKDXZlcnRpY2FsUmFuZ2UYEyABKAISFAoM",
            "dG93YXJkT2Zmc2V0GBQgASgCEhIKCnByb3BNYXhOdW0YFSABKAISEAoIc2hv",
            "b3RNaW4YFiABKAISEAoIc2hvb3RNYXgYFyABKAISEgoKZHJpYmJsZU1pbhgY",
            "IAEoAhISCgpkcmliYmxlTWF4GBkgASgCEg8KB2dyYWJNaW4YGiABKAISDwoH",
            "Z3JhYk1heBgbIAEoAhISCgpkaXN0dXJiTWluGBwgASgCEhIKCmRpc3R1cmJN",
            "YXgYHSABKAISEwoLdHJhbnNmZXJNaW4YHiABKAISEwoLdHJhbnNmZXJNYXgY",
            "HyABKAISEwoLbG9ic2hvb3RNaW4YICABKAISEwoLbG9ic2hvb3RNYXgYISAB",
            "KAISEgoKYWdhaW5zdE1pbhgiIAEoAhISCgphZ2FpbnN0TWF4GCMgASgCEhEK",
            "CWhlYWx0aE1pbhgkIAEoAhIRCgloZWFsdGhNYXgYJSABKAISEQoJZGl2aW5n",
            "TWluGCYgASgCEhEKCWRpdmluZ01heBgnIAEoAhIQCghydW5TcGVlZBgoIAEo",
            "AiIzCg5NYXRjaFBhcmFtTGlzdBIhCgRyb3dzGAEgAygLMhMuaWRsZWFmay5N",
            "YXRjaFBhcmFtKikKCElkZW50aXR5EgoKBkZvcndhZBAAEgcKA01pZBABEggK",
            "BEJhY2sQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Idleafk.Identity), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.Formation), global::Idleafk.Formation.Parser, new[]{ "Id", "Pos", "Type", "Identity", "KickOffPos", "MinPos", "MaxPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.FormationList), global::Idleafk.FormationList.Parser, new[]{ "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.Item), global::Idleafk.Item.Parser, new[]{ "Id", "Name", "Title", "Des", "ItemType", "BagType", "FlyIcon", "Quality", "Sort", "IconRes", "IconBottomRes", "MiniIconRes", "BattleIconRes", "CornerRes", "Stack", "RelationID", "EquipmentExp", "IdleRewardId", "IdleRewardTime", "IdleRewardVip", "GiftReward", "DropBag", "SynthesizeNum", "SynthesizeDropBag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.ItemList), global::Idleafk.ItemList.Parser, new[]{ "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.TotalData), global::Idleafk.TotalData.Parser, new[]{ "Name", "Courses", "Iden", "DressCost", "Drink" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.TotalDataList), global::Idleafk.TotalDataList.Parser, new[]{ "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.ItemInfo), global::Idleafk.ItemInfo.Parser, new[]{ "ItemId", "ItemCount", "IsPayed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.Region), global::Idleafk.Region.Parser, new[]{ "Id", "Forward", "Mid", "Back" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.RegionList), global::Idleafk.RegionList.Parser, new[]{ "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.MatchParam), global::Idleafk.MatchParam.Parser, new[]{ "IntervalUpate", "DefendPlayerNum", "IgnoreDist", "BallOwnRange", "PlayerRadius", "GrabRange", "BallMoveSpd", "Width", "Height", "InnerWidth", "InnerHeight", "OutWidth", "OutHeight", "CenterRadius", "OutRadius", "PitchScale", "WidthSplit", "HeightSplit", "VerticalRange", "TowardOffset", "PropMaxNum", "ShootMin", "ShootMax", "DribbleMin", "DribbleMax", "GrabMin", "GrabMax", "DisturbMin", "DisturbMax", "TransferMin", "TransferMax", "LobshootMin", "LobshootMax", "AgainstMin", "AgainstMax", "HealthMin", "HealthMax", "DivingMin", "DivingMax", "RunSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Idleafk.MatchParamList), global::Idleafk.MatchParamList.Parser, new[]{ "Rows" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Identity {
    [pbr::OriginalName("Forwad")] Forwad = 0,
    /// <summary>
    ///中锋
    /// </summary>
    [pbr::OriginalName("Mid")] Mid = 1,
    /// <summary>
    ///后卫
    /// </summary>
    [pbr::OriginalName("Back")] Back = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Formation : pb::IMessage<Formation> {
    private static readonly pb::MessageParser<Formation> _parser = new pb::MessageParser<Formation>(() => new Formation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Formation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Formation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Formation(Formation other) : this() {
      id_ = other.id_;
      pos_ = other.pos_;
      type_ = other.type_;
      identity_ = other.identity_;
      kickOffPos_ = other.kickOffPos_.Clone();
      minPos_ = other.minPos_.Clone();
      maxPos_ = other.maxPos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Formation Clone() {
      return new Formation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    ///位置索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 4;
    private int identity_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    /// <summary>Field number for the "kickOffPos" field.</summary>
    public const int KickOffPosFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_kickOffPos_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> kickOffPos_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///开球
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> KickOffPos {
      get { return kickOffPos_; }
    }

    /// <summary>Field number for the "minPos" field.</summary>
    public const int MinPosFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_minPos_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> minPos_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///最小位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MinPos {
      get { return minPos_; }
    }

    /// <summary>Field number for the "maxPos" field.</summary>
    public const int MaxPosFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_maxPos_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> maxPos_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///最大位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxPos {
      get { return maxPos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Formation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Formation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Pos != other.Pos) return false;
      if (Type != other.Type) return false;
      if (Identity != other.Identity) return false;
      if(!kickOffPos_.Equals(other.kickOffPos_)) return false;
      if(!minPos_.Equals(other.minPos_)) return false;
      if(!maxPos_.Equals(other.maxPos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Identity != 0) hash ^= Identity.GetHashCode();
      hash ^= kickOffPos_.GetHashCode();
      hash ^= minPos_.GetHashCode();
      hash ^= maxPos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Id);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Pos);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Type);
      }
      if (Identity != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Identity);
      }
      kickOffPos_.WriteTo(output, _repeated_kickOffPos_codec);
      minPos_.WriteTo(output, _repeated_minPos_codec);
      maxPos_.WriteTo(output, _repeated_maxPos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Pos);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type);
      }
      if (Identity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Identity);
      }
      size += kickOffPos_.CalculateSize(_repeated_kickOffPos_codec);
      size += minPos_.CalculateSize(_repeated_minPos_codec);
      size += maxPos_.CalculateSize(_repeated_maxPos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Formation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Identity != 0) {
        Identity = other.Identity;
      }
      kickOffPos_.Add(other.kickOffPos_);
      minPos_.Add(other.minPos_);
      maxPos_.Add(other.maxPos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt32();
            break;
          }
          case 16: {
            Pos = input.ReadSInt32();
            break;
          }
          case 24: {
            Type = input.ReadSInt32();
            break;
          }
          case 32: {
            Identity = input.ReadSInt32();
            break;
          }
          case 42:
          case 45: {
            kickOffPos_.AddEntriesFrom(input, _repeated_kickOffPos_codec);
            break;
          }
          case 50:
          case 53: {
            minPos_.AddEntriesFrom(input, _repeated_minPos_codec);
            break;
          }
          case 58:
          case 61: {
            maxPos_.AddEntriesFrom(input, _repeated_maxPos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FormationList : pb::IMessage<FormationList> {
    private static readonly pb::MessageParser<FormationList> _parser = new pb::MessageParser<FormationList>(() => new FormationList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormationList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormationList(FormationList other) : this() {
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormationList Clone() {
      return new FormationList(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Idleafk.Formation> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Idleafk.Formation.Parser);
    private readonly pbc::RepeatedField<global::Idleafk.Formation> rows_ = new pbc::RepeatedField<global::Idleafk.Formation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Idleafk.Formation> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FormationList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FormationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FormationList other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Item : pb::IMessage<Item> {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item(Item other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      title_ = other.title_;
      des_ = other.des_;
      itemType_ = other.itemType_;
      bagType_ = other.bagType_;
      flyIcon_ = other.flyIcon_;
      quality_ = other.quality_;
      sort_ = other.sort_;
      iconRes_ = other.iconRes_;
      iconBottomRes_ = other.iconBottomRes_;
      miniIconRes_ = other.miniIconRes_;
      battleIconRes_ = other.battleIconRes_;
      cornerRes_ = other.cornerRes_;
      stack_ = other.stack_;
      relationID_ = other.relationID_;
      equipmentExp_ = other.equipmentExp_.Clone();
      idleRewardId_ = other.idleRewardId_.Clone();
      idleRewardTime_ = other.idleRewardTime_;
      idleRewardVip_ = other.idleRewardVip_;
      giftReward_ = other.giftReward_.Clone();
      dropBag_ = other.dropBag_;
      synthesizeNum_ = other.synthesizeNum_;
      synthesizeDropBag_ = other.synthesizeDropBag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///道具名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    /// <summary>
    ///道具小title
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "des" field.</summary>
    public const int DesFieldNumber = 4;
    private string des_ = "";
    /// <summary>
    ///道具描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Des {
      get { return des_; }
      set {
        des_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemType" field.</summary>
    public const int ItemTypeFieldNumber = 5;
    private int itemType_;
    /// <summary>
    ///道具类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "bagType" field.</summary>
    public const int BagTypeFieldNumber = 6;
    private int bagType_;
    /// <summary>
    ///背包分类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BagType {
      get { return bagType_; }
      set {
        bagType_ = value;
      }
    }

    /// <summary>Field number for the "flyIcon" field.</summary>
    public const int FlyIconFieldNumber = 7;
    private int flyIcon_;
    /// <summary>
    ///物品飞向哪个图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FlyIcon {
      get { return flyIcon_; }
      set {
        flyIcon_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 8;
    private int quality_;
    /// <summary>
    ///品质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 9;
    private int sort_;
    /// <summary>
    ///背包排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "iconRes" field.</summary>
    public const int IconResFieldNumber = 10;
    private string iconRes_ = "";
    /// <summary>
    ///图标资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconRes {
      get { return iconRes_; }
      set {
        iconRes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconBottomRes" field.</summary>
    public const int IconBottomResFieldNumber = 11;
    private string iconBottomRes_ = "";
    /// <summary>
    ///图标底板资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconBottomRes {
      get { return iconBottomRes_; }
      set {
        iconBottomRes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "miniIconRes" field.</summary>
    public const int MiniIconResFieldNumber = 12;
    private string miniIconRes_ = "";
    /// <summary>
    ///小图标资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MiniIconRes {
      get { return miniIconRes_; }
      set {
        miniIconRes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battleIconRes" field.</summary>
    public const int BattleIconResFieldNumber = 13;
    private string battleIconRes_ = "";
    /// <summary>
    ///战斗场景用图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleIconRes {
      get { return battleIconRes_; }
      set {
        battleIconRes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cornerRes" field.</summary>
    public const int CornerResFieldNumber = 14;
    private string cornerRes_ = "";
    /// <summary>
    ///角标名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CornerRes {
      get { return cornerRes_; }
      set {
        cornerRes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stack" field.</summary>
    public const int StackFieldNumber = 15;
    private int stack_;
    /// <summary>
    ///堆叠上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stack {
      get { return stack_; }
      set {
        stack_ = value;
      }
    }

    /// <summary>Field number for the "relationID" field.</summary>
    public const int RelationIDFieldNumber = 16;
    private int relationID_;
    /// <summary>
    ///关联id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelationID {
      get { return relationID_; }
      set {
        relationID_ = value;
      }
    }

    /// <summary>Field number for the "equipmentExp" field.</summary>
    public const int EquipmentExpFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_equipmentExp_codec
        = pb::FieldCodec.ForSInt32(138);
    private readonly pbc::RepeatedField<int> equipmentExp_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///装备强化经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EquipmentExp {
      get { return equipmentExp_; }
    }

    /// <summary>Field number for the "idleRewardId" field.</summary>
    public const int IdleRewardIdFieldNumber = 18;
    private static readonly pb::FieldCodec<int> _repeated_idleRewardId_codec
        = pb::FieldCodec.ForSInt32(146);
    private readonly pbc::RepeatedField<int> idleRewardId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///挂机产出道具奖励Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IdleRewardId {
      get { return idleRewardId_; }
    }

    /// <summary>Field number for the "idleRewardTime" field.</summary>
    public const int IdleRewardTimeFieldNumber = 19;
    private int idleRewardTime_;
    /// <summary>
    ///挂机产出道具时长(小时)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdleRewardTime {
      get { return idleRewardTime_; }
      set {
        idleRewardTime_ = value;
      }
    }

    /// <summary>Field number for the "idleRewardVip" field.</summary>
    public const int IdleRewardVipFieldNumber = 20;
    private int idleRewardVip_;
    /// <summary>
    ///挂机产出道具是否受vip加成影响
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdleRewardVip {
      get { return idleRewardVip_; }
      set {
        idleRewardVip_ = value;
      }
    }

    /// <summary>Field number for the "giftReward" field.</summary>
    public const int GiftRewardFieldNumber = 21;
    private static readonly pb::FieldCodec<int> _repeated_giftReward_codec
        = pb::FieldCodec.ForSInt32(170);
    private readonly pbc::RepeatedField<int> giftReward_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///打开获取奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GiftReward {
      get { return giftReward_; }
    }

    /// <summary>Field number for the "dropBag" field.</summary>
    public const int DropBagFieldNumber = 22;
    private int dropBag_;
    /// <summary>
    ///掉落包id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropBag {
      get { return dropBag_; }
      set {
        dropBag_ = value;
      }
    }

    /// <summary>Field number for the "synthesizeNum" field.</summary>
    public const int SynthesizeNumFieldNumber = 23;
    private int synthesizeNum_;
    /// <summary>
    ///合成需要碎片数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SynthesizeNum {
      get { return synthesizeNum_; }
      set {
        synthesizeNum_ = value;
      }
    }

    /// <summary>Field number for the "synthesizeDropBag" field.</summary>
    public const int SynthesizeDropBagFieldNumber = 24;
    private int synthesizeDropBag_;
    /// <summary>
    ///合成后掉落包id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SynthesizeDropBag {
      get { return synthesizeDropBag_; }
      set {
        synthesizeDropBag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Title != other.Title) return false;
      if (Des != other.Des) return false;
      if (ItemType != other.ItemType) return false;
      if (BagType != other.BagType) return false;
      if (FlyIcon != other.FlyIcon) return false;
      if (Quality != other.Quality) return false;
      if (Sort != other.Sort) return false;
      if (IconRes != other.IconRes) return false;
      if (IconBottomRes != other.IconBottomRes) return false;
      if (MiniIconRes != other.MiniIconRes) return false;
      if (BattleIconRes != other.BattleIconRes) return false;
      if (CornerRes != other.CornerRes) return false;
      if (Stack != other.Stack) return false;
      if (RelationID != other.RelationID) return false;
      if(!equipmentExp_.Equals(other.equipmentExp_)) return false;
      if(!idleRewardId_.Equals(other.idleRewardId_)) return false;
      if (IdleRewardTime != other.IdleRewardTime) return false;
      if (IdleRewardVip != other.IdleRewardVip) return false;
      if(!giftReward_.Equals(other.giftReward_)) return false;
      if (DropBag != other.DropBag) return false;
      if (SynthesizeNum != other.SynthesizeNum) return false;
      if (SynthesizeDropBag != other.SynthesizeDropBag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Des.Length != 0) hash ^= Des.GetHashCode();
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (BagType != 0) hash ^= BagType.GetHashCode();
      if (FlyIcon != 0) hash ^= FlyIcon.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (IconRes.Length != 0) hash ^= IconRes.GetHashCode();
      if (IconBottomRes.Length != 0) hash ^= IconBottomRes.GetHashCode();
      if (MiniIconRes.Length != 0) hash ^= MiniIconRes.GetHashCode();
      if (BattleIconRes.Length != 0) hash ^= BattleIconRes.GetHashCode();
      if (CornerRes.Length != 0) hash ^= CornerRes.GetHashCode();
      if (Stack != 0) hash ^= Stack.GetHashCode();
      if (RelationID != 0) hash ^= RelationID.GetHashCode();
      hash ^= equipmentExp_.GetHashCode();
      hash ^= idleRewardId_.GetHashCode();
      if (IdleRewardTime != 0) hash ^= IdleRewardTime.GetHashCode();
      if (IdleRewardVip != 0) hash ^= IdleRewardVip.GetHashCode();
      hash ^= giftReward_.GetHashCode();
      if (DropBag != 0) hash ^= DropBag.GetHashCode();
      if (SynthesizeNum != 0) hash ^= SynthesizeNum.GetHashCode();
      if (SynthesizeDropBag != 0) hash ^= SynthesizeDropBag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Des.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Des);
      }
      if (ItemType != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(ItemType);
      }
      if (BagType != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(BagType);
      }
      if (FlyIcon != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(FlyIcon);
      }
      if (Quality != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Quality);
      }
      if (Sort != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Sort);
      }
      if (IconRes.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(IconRes);
      }
      if (IconBottomRes.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IconBottomRes);
      }
      if (MiniIconRes.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(MiniIconRes);
      }
      if (BattleIconRes.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(BattleIconRes);
      }
      if (CornerRes.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CornerRes);
      }
      if (Stack != 0) {
        output.WriteRawTag(120);
        output.WriteSInt32(Stack);
      }
      if (RelationID != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(RelationID);
      }
      equipmentExp_.WriteTo(output, _repeated_equipmentExp_codec);
      idleRewardId_.WriteTo(output, _repeated_idleRewardId_codec);
      if (IdleRewardTime != 0) {
        output.WriteRawTag(152, 1);
        output.WriteSInt32(IdleRewardTime);
      }
      if (IdleRewardVip != 0) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(IdleRewardVip);
      }
      giftReward_.WriteTo(output, _repeated_giftReward_codec);
      if (DropBag != 0) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(DropBag);
      }
      if (SynthesizeNum != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(SynthesizeNum);
      }
      if (SynthesizeDropBag != 0) {
        output.WriteRawTag(192, 1);
        output.WriteSInt32(SynthesizeDropBag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Des.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Des);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemType);
      }
      if (BagType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BagType);
      }
      if (FlyIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(FlyIcon);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Quality);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sort);
      }
      if (IconRes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconRes);
      }
      if (IconBottomRes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconBottomRes);
      }
      if (MiniIconRes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MiniIconRes);
      }
      if (BattleIconRes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleIconRes);
      }
      if (CornerRes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CornerRes);
      }
      if (Stack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Stack);
      }
      if (RelationID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RelationID);
      }
      size += equipmentExp_.CalculateSize(_repeated_equipmentExp_codec);
      size += idleRewardId_.CalculateSize(_repeated_idleRewardId_codec);
      if (IdleRewardTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(IdleRewardTime);
      }
      if (IdleRewardVip != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(IdleRewardVip);
      }
      size += giftReward_.CalculateSize(_repeated_giftReward_codec);
      if (DropBag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DropBag);
      }
      if (SynthesizeNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SynthesizeNum);
      }
      if (SynthesizeDropBag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SynthesizeDropBag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Des.Length != 0) {
        Des = other.Des;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.BagType != 0) {
        BagType = other.BagType;
      }
      if (other.FlyIcon != 0) {
        FlyIcon = other.FlyIcon;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.IconRes.Length != 0) {
        IconRes = other.IconRes;
      }
      if (other.IconBottomRes.Length != 0) {
        IconBottomRes = other.IconBottomRes;
      }
      if (other.MiniIconRes.Length != 0) {
        MiniIconRes = other.MiniIconRes;
      }
      if (other.BattleIconRes.Length != 0) {
        BattleIconRes = other.BattleIconRes;
      }
      if (other.CornerRes.Length != 0) {
        CornerRes = other.CornerRes;
      }
      if (other.Stack != 0) {
        Stack = other.Stack;
      }
      if (other.RelationID != 0) {
        RelationID = other.RelationID;
      }
      equipmentExp_.Add(other.equipmentExp_);
      idleRewardId_.Add(other.idleRewardId_);
      if (other.IdleRewardTime != 0) {
        IdleRewardTime = other.IdleRewardTime;
      }
      if (other.IdleRewardVip != 0) {
        IdleRewardVip = other.IdleRewardVip;
      }
      giftReward_.Add(other.giftReward_);
      if (other.DropBag != 0) {
        DropBag = other.DropBag;
      }
      if (other.SynthesizeNum != 0) {
        SynthesizeNum = other.SynthesizeNum;
      }
      if (other.SynthesizeDropBag != 0) {
        SynthesizeDropBag = other.SynthesizeDropBag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Des = input.ReadString();
            break;
          }
          case 40: {
            ItemType = input.ReadSInt32();
            break;
          }
          case 48: {
            BagType = input.ReadSInt32();
            break;
          }
          case 56: {
            FlyIcon = input.ReadSInt32();
            break;
          }
          case 64: {
            Quality = input.ReadSInt32();
            break;
          }
          case 72: {
            Sort = input.ReadSInt32();
            break;
          }
          case 82: {
            IconRes = input.ReadString();
            break;
          }
          case 90: {
            IconBottomRes = input.ReadString();
            break;
          }
          case 98: {
            MiniIconRes = input.ReadString();
            break;
          }
          case 106: {
            BattleIconRes = input.ReadString();
            break;
          }
          case 114: {
            CornerRes = input.ReadString();
            break;
          }
          case 120: {
            Stack = input.ReadSInt32();
            break;
          }
          case 128: {
            RelationID = input.ReadSInt32();
            break;
          }
          case 138:
          case 136: {
            equipmentExp_.AddEntriesFrom(input, _repeated_equipmentExp_codec);
            break;
          }
          case 146:
          case 144: {
            idleRewardId_.AddEntriesFrom(input, _repeated_idleRewardId_codec);
            break;
          }
          case 152: {
            IdleRewardTime = input.ReadSInt32();
            break;
          }
          case 160: {
            IdleRewardVip = input.ReadSInt32();
            break;
          }
          case 170:
          case 168: {
            giftReward_.AddEntriesFrom(input, _repeated_giftReward_codec);
            break;
          }
          case 176: {
            DropBag = input.ReadSInt32();
            break;
          }
          case 184: {
            SynthesizeNum = input.ReadSInt32();
            break;
          }
          case 192: {
            SynthesizeDropBag = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemList : pb::IMessage<ItemList> {
    private static readonly pb::MessageParser<ItemList> _parser = new pb::MessageParser<ItemList>(() => new ItemList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList(ItemList other) : this() {
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList Clone() {
      return new ItemList(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Idleafk.Item> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Idleafk.Item.Parser);
    private readonly pbc::RepeatedField<global::Idleafk.Item> rows_ = new pbc::RepeatedField<global::Idleafk.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Idleafk.Item> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemList other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TotalData : pb::IMessage<TotalData> {
    private static readonly pb::MessageParser<TotalData> _parser = new pb::MessageParser<TotalData>(() => new TotalData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TotalData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalData(TotalData other) : this() {
      name_ = other.name_;
      courses_ = other.courses_.Clone();
      iden_ = other.iden_;
      DressCost = other.dressCost_ != null ? other.DressCost.Clone() : null;
      drink_ = other.drink_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalData Clone() {
      return new TotalData(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "courses" field.</summary>
    public const int CoursesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_courses_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> courses_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///课程
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Courses {
      get { return courses_; }
    }

    /// <summary>Field number for the "iden" field.</summary>
    public const int IdenFieldNumber = 3;
    private global::Idleafk.Identity iden_ = 0;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Idleafk.Identity Iden {
      get { return iden_; }
      set {
        iden_ = value;
      }
    }

    /// <summary>Field number for the "dressCost" field.</summary>
    public const int DressCostFieldNumber = 4;
    private global::Idleafk.ItemInfo dressCost_;
    /// <summary>
    ///球服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Idleafk.ItemInfo DressCost {
      get { return dressCost_; }
      set {
        dressCost_ = value;
      }
    }

    /// <summary>Field number for the "drink" field.</summary>
    public const int DrinkFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Idleafk.ItemInfo> _repeated_drink_codec
        = pb::FieldCodec.ForMessage(42, global::Idleafk.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Idleafk.ItemInfo> drink_ = new pbc::RepeatedField<global::Idleafk.ItemInfo>();
    /// <summary>
    ///饮料
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Idleafk.ItemInfo> Drink {
      get { return drink_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TotalData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TotalData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!courses_.Equals(other.courses_)) return false;
      if (Iden != other.Iden) return false;
      if (!object.Equals(DressCost, other.DressCost)) return false;
      if(!drink_.Equals(other.drink_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= courses_.GetHashCode();
      if (Iden != 0) hash ^= Iden.GetHashCode();
      if (dressCost_ != null) hash ^= DressCost.GetHashCode();
      hash ^= drink_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      courses_.WriteTo(output, _repeated_courses_codec);
      if (Iden != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Iden);
      }
      if (dressCost_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DressCost);
      }
      drink_.WriteTo(output, _repeated_drink_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += courses_.CalculateSize(_repeated_courses_codec);
      if (Iden != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Iden);
      }
      if (dressCost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DressCost);
      }
      size += drink_.CalculateSize(_repeated_drink_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TotalData other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      courses_.Add(other.courses_);
      if (other.Iden != 0) {
        Iden = other.Iden;
      }
      if (other.dressCost_ != null) {
        if (dressCost_ == null) {
          dressCost_ = new global::Idleafk.ItemInfo();
        }
        DressCost.MergeFrom(other.DressCost);
      }
      drink_.Add(other.drink_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            courses_.AddEntriesFrom(input, _repeated_courses_codec);
            break;
          }
          case 24: {
            iden_ = (global::Idleafk.Identity) input.ReadEnum();
            break;
          }
          case 34: {
            if (dressCost_ == null) {
              dressCost_ = new global::Idleafk.ItemInfo();
            }
            input.ReadMessage(dressCost_);
            break;
          }
          case 42: {
            drink_.AddEntriesFrom(input, _repeated_drink_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TotalDataList : pb::IMessage<TotalDataList> {
    private static readonly pb::MessageParser<TotalDataList> _parser = new pb::MessageParser<TotalDataList>(() => new TotalDataList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TotalDataList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalDataList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalDataList(TotalDataList other) : this() {
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalDataList Clone() {
      return new TotalDataList(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Idleafk.TotalData> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Idleafk.TotalData.Parser);
    private readonly pbc::RepeatedField<global::Idleafk.TotalData> rows_ = new pbc::RepeatedField<global::Idleafk.TotalData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Idleafk.TotalData> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TotalDataList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TotalDataList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TotalDataList other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo(ItemInfo other) : this() {
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      isPayed_ = other.isPayed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo Clone() {
      return new ItemInfo(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private string itemId_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemCount" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private uint itemCount_;
    /// <summary>
    ///身份
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "isPayed" field.</summary>
    public const int IsPayedFieldNumber = 3;
    private bool isPayed_;
    /// <summary>
    ///是否支付
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPayed {
      get { return isPayed_; }
      set {
        isPayed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      if (IsPayed != other.IsPayed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (IsPayed != false) hash ^= IsPayed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemCount);
      }
      if (IsPayed != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPayed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCount);
      }
      if (IsPayed != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      if (other.IsPayed != false) {
        IsPayed = other.IsPayed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
          case 16: {
            ItemCount = input.ReadUInt32();
            break;
          }
          case 24: {
            IsPayed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Region : pb::IMessage<Region> {
    private static readonly pb::MessageParser<Region> _parser = new pb::MessageParser<Region>(() => new Region());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Region> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region(Region other) : this() {
      id_ = other.id_;
      forward_ = other.forward_.Clone();
      mid_ = other.mid_.Clone();
      back_ = other.back_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Region Clone() {
      return new Region(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_forward_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> forward_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///前锋
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Forward {
      get { return forward_; }
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_mid_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> mid_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///中锋
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Mid {
      get { return mid_; }
    }

    /// <summary>Field number for the "back" field.</summary>
    public const int BackFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_back_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> back_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///后卫
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Back {
      get { return back_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Region);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Region other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!forward_.Equals(other.forward_)) return false;
      if(!mid_.Equals(other.mid_)) return false;
      if(!back_.Equals(other.back_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= forward_.GetHashCode();
      hash ^= mid_.GetHashCode();
      hash ^= back_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Id);
      }
      forward_.WriteTo(output, _repeated_forward_codec);
      mid_.WriteTo(output, _repeated_mid_codec);
      back_.WriteTo(output, _repeated_back_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      size += forward_.CalculateSize(_repeated_forward_codec);
      size += mid_.CalculateSize(_repeated_mid_codec);
      size += back_.CalculateSize(_repeated_back_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Region other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      forward_.Add(other.forward_);
      mid_.Add(other.mid_);
      back_.Add(other.back_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt32();
            break;
          }
          case 18:
          case 21: {
            forward_.AddEntriesFrom(input, _repeated_forward_codec);
            break;
          }
          case 26:
          case 29: {
            mid_.AddEntriesFrom(input, _repeated_mid_codec);
            break;
          }
          case 34:
          case 37: {
            back_.AddEntriesFrom(input, _repeated_back_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegionList : pb::IMessage<RegionList> {
    private static readonly pb::MessageParser<RegionList> _parser = new pb::MessageParser<RegionList>(() => new RegionList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionList(RegionList other) : this() {
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionList Clone() {
      return new RegionList(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Idleafk.Region> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Idleafk.Region.Parser);
    private readonly pbc::RepeatedField<global::Idleafk.Region> rows_ = new pbc::RepeatedField<global::Idleafk.Region>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Idleafk.Region> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionList other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchParam : pb::IMessage<MatchParam> {
    private static readonly pb::MessageParser<MatchParam> _parser = new pb::MessageParser<MatchParam>(() => new MatchParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchParam(MatchParam other) : this() {
      intervalUpate_ = other.intervalUpate_;
      defendPlayerNum_ = other.defendPlayerNum_;
      ignoreDist_ = other.ignoreDist_;
      ballOwnRange_ = other.ballOwnRange_;
      playerRadius_ = other.playerRadius_;
      grabRange_ = other.grabRange_;
      ballMoveSpd_ = other.ballMoveSpd_;
      width_ = other.width_;
      height_ = other.height_;
      innerWidth_ = other.innerWidth_;
      innerHeight_ = other.innerHeight_;
      outWidth_ = other.outWidth_;
      outHeight_ = other.outHeight_;
      centerRadius_ = other.centerRadius_;
      outRadius_ = other.outRadius_;
      pitchScale_ = other.pitchScale_;
      widthSplit_ = other.widthSplit_;
      heightSplit_ = other.heightSplit_;
      verticalRange_ = other.verticalRange_;
      towardOffset_ = other.towardOffset_;
      propMaxNum_ = other.propMaxNum_;
      shootMin_ = other.shootMin_;
      shootMax_ = other.shootMax_;
      dribbleMin_ = other.dribbleMin_;
      dribbleMax_ = other.dribbleMax_;
      grabMin_ = other.grabMin_;
      grabMax_ = other.grabMax_;
      disturbMin_ = other.disturbMin_;
      disturbMax_ = other.disturbMax_;
      transferMin_ = other.transferMin_;
      transferMax_ = other.transferMax_;
      lobshootMin_ = other.lobshootMin_;
      lobshootMax_ = other.lobshootMax_;
      againstMin_ = other.againstMin_;
      againstMax_ = other.againstMax_;
      healthMin_ = other.healthMin_;
      healthMax_ = other.healthMax_;
      divingMin_ = other.divingMin_;
      divingMax_ = other.divingMax_;
      runSpeed_ = other.runSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchParam Clone() {
      return new MatchParam(this);
    }

    /// <summary>Field number for the "intervalUpate" field.</summary>
    public const int IntervalUpateFieldNumber = 1;
    private float intervalUpate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IntervalUpate {
      get { return intervalUpate_; }
      set {
        intervalUpate_ = value;
      }
    }

    /// <summary>Field number for the "defendPlayerNum" field.</summary>
    public const int DefendPlayerNumFieldNumber = 2;
    private int defendPlayerNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefendPlayerNum {
      get { return defendPlayerNum_; }
      set {
        defendPlayerNum_ = value;
      }
    }

    /// <summary>Field number for the "ignoreDist" field.</summary>
    public const int IgnoreDistFieldNumber = 3;
    private float ignoreDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IgnoreDist {
      get { return ignoreDist_; }
      set {
        ignoreDist_ = value;
      }
    }

    /// <summary>Field number for the "ballOwnRange" field.</summary>
    public const int BallOwnRangeFieldNumber = 4;
    private float ballOwnRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BallOwnRange {
      get { return ballOwnRange_; }
      set {
        ballOwnRange_ = value;
      }
    }

    /// <summary>Field number for the "playerRadius" field.</summary>
    public const int PlayerRadiusFieldNumber = 5;
    private float playerRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerRadius {
      get { return playerRadius_; }
      set {
        playerRadius_ = value;
      }
    }

    /// <summary>Field number for the "grabRange" field.</summary>
    public const int GrabRangeFieldNumber = 6;
    private float grabRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrabRange {
      get { return grabRange_; }
      set {
        grabRange_ = value;
      }
    }

    /// <summary>Field number for the "ballMoveSpd" field.</summary>
    public const int BallMoveSpdFieldNumber = 7;
    private float ballMoveSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BallMoveSpd {
      get { return ballMoveSpd_; }
      set {
        ballMoveSpd_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 8;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 9;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "innerWidth" field.</summary>
    public const int InnerWidthFieldNumber = 10;
    private float innerWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InnerWidth {
      get { return innerWidth_; }
      set {
        innerWidth_ = value;
      }
    }

    /// <summary>Field number for the "innerHeight" field.</summary>
    public const int InnerHeightFieldNumber = 11;
    private float innerHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InnerHeight {
      get { return innerHeight_; }
      set {
        innerHeight_ = value;
      }
    }

    /// <summary>Field number for the "outWidth" field.</summary>
    public const int OutWidthFieldNumber = 12;
    private float outWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutWidth {
      get { return outWidth_; }
      set {
        outWidth_ = value;
      }
    }

    /// <summary>Field number for the "outHeight" field.</summary>
    public const int OutHeightFieldNumber = 13;
    private float outHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutHeight {
      get { return outHeight_; }
      set {
        outHeight_ = value;
      }
    }

    /// <summary>Field number for the "centerRadius" field.</summary>
    public const int CenterRadiusFieldNumber = 14;
    private float centerRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterRadius {
      get { return centerRadius_; }
      set {
        centerRadius_ = value;
      }
    }

    /// <summary>Field number for the "outRadius" field.</summary>
    public const int OutRadiusFieldNumber = 15;
    private float outRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutRadius {
      get { return outRadius_; }
      set {
        outRadius_ = value;
      }
    }

    /// <summary>Field number for the "pitchScale" field.</summary>
    public const int PitchScaleFieldNumber = 16;
    private float pitchScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PitchScale {
      get { return pitchScale_; }
      set {
        pitchScale_ = value;
      }
    }

    /// <summary>Field number for the "widthSplit" field.</summary>
    public const int WidthSplitFieldNumber = 17;
    private float widthSplit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WidthSplit {
      get { return widthSplit_; }
      set {
        widthSplit_ = value;
      }
    }

    /// <summary>Field number for the "heightSplit" field.</summary>
    public const int HeightSplitFieldNumber = 18;
    private float heightSplit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightSplit {
      get { return heightSplit_; }
      set {
        heightSplit_ = value;
      }
    }

    /// <summary>Field number for the "verticalRange" field.</summary>
    public const int VerticalRangeFieldNumber = 19;
    private float verticalRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VerticalRange {
      get { return verticalRange_; }
      set {
        verticalRange_ = value;
      }
    }

    /// <summary>Field number for the "towardOffset" field.</summary>
    public const int TowardOffsetFieldNumber = 20;
    private float towardOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TowardOffset {
      get { return towardOffset_; }
      set {
        towardOffset_ = value;
      }
    }

    /// <summary>Field number for the "propMaxNum" field.</summary>
    public const int PropMaxNumFieldNumber = 21;
    private float propMaxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PropMaxNum {
      get { return propMaxNum_; }
      set {
        propMaxNum_ = value;
      }
    }

    /// <summary>Field number for the "shootMin" field.</summary>
    public const int ShootMinFieldNumber = 22;
    private float shootMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShootMin {
      get { return shootMin_; }
      set {
        shootMin_ = value;
      }
    }

    /// <summary>Field number for the "shootMax" field.</summary>
    public const int ShootMaxFieldNumber = 23;
    private float shootMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShootMax {
      get { return shootMax_; }
      set {
        shootMax_ = value;
      }
    }

    /// <summary>Field number for the "dribbleMin" field.</summary>
    public const int DribbleMinFieldNumber = 24;
    private float dribbleMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DribbleMin {
      get { return dribbleMin_; }
      set {
        dribbleMin_ = value;
      }
    }

    /// <summary>Field number for the "dribbleMax" field.</summary>
    public const int DribbleMaxFieldNumber = 25;
    private float dribbleMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DribbleMax {
      get { return dribbleMax_; }
      set {
        dribbleMax_ = value;
      }
    }

    /// <summary>Field number for the "grabMin" field.</summary>
    public const int GrabMinFieldNumber = 26;
    private float grabMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrabMin {
      get { return grabMin_; }
      set {
        grabMin_ = value;
      }
    }

    /// <summary>Field number for the "grabMax" field.</summary>
    public const int GrabMaxFieldNumber = 27;
    private float grabMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrabMax {
      get { return grabMax_; }
      set {
        grabMax_ = value;
      }
    }

    /// <summary>Field number for the "disturbMin" field.</summary>
    public const int DisturbMinFieldNumber = 28;
    private float disturbMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisturbMin {
      get { return disturbMin_; }
      set {
        disturbMin_ = value;
      }
    }

    /// <summary>Field number for the "disturbMax" field.</summary>
    public const int DisturbMaxFieldNumber = 29;
    private float disturbMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisturbMax {
      get { return disturbMax_; }
      set {
        disturbMax_ = value;
      }
    }

    /// <summary>Field number for the "transferMin" field.</summary>
    public const int TransferMinFieldNumber = 30;
    private float transferMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransferMin {
      get { return transferMin_; }
      set {
        transferMin_ = value;
      }
    }

    /// <summary>Field number for the "transferMax" field.</summary>
    public const int TransferMaxFieldNumber = 31;
    private float transferMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransferMax {
      get { return transferMax_; }
      set {
        transferMax_ = value;
      }
    }

    /// <summary>Field number for the "lobshootMin" field.</summary>
    public const int LobshootMinFieldNumber = 32;
    private float lobshootMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LobshootMin {
      get { return lobshootMin_; }
      set {
        lobshootMin_ = value;
      }
    }

    /// <summary>Field number for the "lobshootMax" field.</summary>
    public const int LobshootMaxFieldNumber = 33;
    private float lobshootMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LobshootMax {
      get { return lobshootMax_; }
      set {
        lobshootMax_ = value;
      }
    }

    /// <summary>Field number for the "againstMin" field.</summary>
    public const int AgainstMinFieldNumber = 34;
    private float againstMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AgainstMin {
      get { return againstMin_; }
      set {
        againstMin_ = value;
      }
    }

    /// <summary>Field number for the "againstMax" field.</summary>
    public const int AgainstMaxFieldNumber = 35;
    private float againstMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AgainstMax {
      get { return againstMax_; }
      set {
        againstMax_ = value;
      }
    }

    /// <summary>Field number for the "healthMin" field.</summary>
    public const int HealthMinFieldNumber = 36;
    private float healthMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealthMin {
      get { return healthMin_; }
      set {
        healthMin_ = value;
      }
    }

    /// <summary>Field number for the "healthMax" field.</summary>
    public const int HealthMaxFieldNumber = 37;
    private float healthMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealthMax {
      get { return healthMax_; }
      set {
        healthMax_ = value;
      }
    }

    /// <summary>Field number for the "divingMin" field.</summary>
    public const int DivingMinFieldNumber = 38;
    private float divingMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DivingMin {
      get { return divingMin_; }
      set {
        divingMin_ = value;
      }
    }

    /// <summary>Field number for the "divingMax" field.</summary>
    public const int DivingMaxFieldNumber = 39;
    private float divingMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DivingMax {
      get { return divingMax_; }
      set {
        divingMax_ = value;
      }
    }

    /// <summary>Field number for the "runSpeed" field.</summary>
    public const int RunSpeedFieldNumber = 40;
    private float runSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RunSpeed {
      get { return runSpeed_; }
      set {
        runSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntervalUpate != other.IntervalUpate) return false;
      if (DefendPlayerNum != other.DefendPlayerNum) return false;
      if (IgnoreDist != other.IgnoreDist) return false;
      if (BallOwnRange != other.BallOwnRange) return false;
      if (PlayerRadius != other.PlayerRadius) return false;
      if (GrabRange != other.GrabRange) return false;
      if (BallMoveSpd != other.BallMoveSpd) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (InnerWidth != other.InnerWidth) return false;
      if (InnerHeight != other.InnerHeight) return false;
      if (OutWidth != other.OutWidth) return false;
      if (OutHeight != other.OutHeight) return false;
      if (CenterRadius != other.CenterRadius) return false;
      if (OutRadius != other.OutRadius) return false;
      if (PitchScale != other.PitchScale) return false;
      if (WidthSplit != other.WidthSplit) return false;
      if (HeightSplit != other.HeightSplit) return false;
      if (VerticalRange != other.VerticalRange) return false;
      if (TowardOffset != other.TowardOffset) return false;
      if (PropMaxNum != other.PropMaxNum) return false;
      if (ShootMin != other.ShootMin) return false;
      if (ShootMax != other.ShootMax) return false;
      if (DribbleMin != other.DribbleMin) return false;
      if (DribbleMax != other.DribbleMax) return false;
      if (GrabMin != other.GrabMin) return false;
      if (GrabMax != other.GrabMax) return false;
      if (DisturbMin != other.DisturbMin) return false;
      if (DisturbMax != other.DisturbMax) return false;
      if (TransferMin != other.TransferMin) return false;
      if (TransferMax != other.TransferMax) return false;
      if (LobshootMin != other.LobshootMin) return false;
      if (LobshootMax != other.LobshootMax) return false;
      if (AgainstMin != other.AgainstMin) return false;
      if (AgainstMax != other.AgainstMax) return false;
      if (HealthMin != other.HealthMin) return false;
      if (HealthMax != other.HealthMax) return false;
      if (DivingMin != other.DivingMin) return false;
      if (DivingMax != other.DivingMax) return false;
      if (RunSpeed != other.RunSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IntervalUpate != 0F) hash ^= IntervalUpate.GetHashCode();
      if (DefendPlayerNum != 0) hash ^= DefendPlayerNum.GetHashCode();
      if (IgnoreDist != 0F) hash ^= IgnoreDist.GetHashCode();
      if (BallOwnRange != 0F) hash ^= BallOwnRange.GetHashCode();
      if (PlayerRadius != 0F) hash ^= PlayerRadius.GetHashCode();
      if (GrabRange != 0F) hash ^= GrabRange.GetHashCode();
      if (BallMoveSpd != 0F) hash ^= BallMoveSpd.GetHashCode();
      if (Width != 0F) hash ^= Width.GetHashCode();
      if (Height != 0F) hash ^= Height.GetHashCode();
      if (InnerWidth != 0F) hash ^= InnerWidth.GetHashCode();
      if (InnerHeight != 0F) hash ^= InnerHeight.GetHashCode();
      if (OutWidth != 0F) hash ^= OutWidth.GetHashCode();
      if (OutHeight != 0F) hash ^= OutHeight.GetHashCode();
      if (CenterRadius != 0F) hash ^= CenterRadius.GetHashCode();
      if (OutRadius != 0F) hash ^= OutRadius.GetHashCode();
      if (PitchScale != 0F) hash ^= PitchScale.GetHashCode();
      if (WidthSplit != 0F) hash ^= WidthSplit.GetHashCode();
      if (HeightSplit != 0F) hash ^= HeightSplit.GetHashCode();
      if (VerticalRange != 0F) hash ^= VerticalRange.GetHashCode();
      if (TowardOffset != 0F) hash ^= TowardOffset.GetHashCode();
      if (PropMaxNum != 0F) hash ^= PropMaxNum.GetHashCode();
      if (ShootMin != 0F) hash ^= ShootMin.GetHashCode();
      if (ShootMax != 0F) hash ^= ShootMax.GetHashCode();
      if (DribbleMin != 0F) hash ^= DribbleMin.GetHashCode();
      if (DribbleMax != 0F) hash ^= DribbleMax.GetHashCode();
      if (GrabMin != 0F) hash ^= GrabMin.GetHashCode();
      if (GrabMax != 0F) hash ^= GrabMax.GetHashCode();
      if (DisturbMin != 0F) hash ^= DisturbMin.GetHashCode();
      if (DisturbMax != 0F) hash ^= DisturbMax.GetHashCode();
      if (TransferMin != 0F) hash ^= TransferMin.GetHashCode();
      if (TransferMax != 0F) hash ^= TransferMax.GetHashCode();
      if (LobshootMin != 0F) hash ^= LobshootMin.GetHashCode();
      if (LobshootMax != 0F) hash ^= LobshootMax.GetHashCode();
      if (AgainstMin != 0F) hash ^= AgainstMin.GetHashCode();
      if (AgainstMax != 0F) hash ^= AgainstMax.GetHashCode();
      if (HealthMin != 0F) hash ^= HealthMin.GetHashCode();
      if (HealthMax != 0F) hash ^= HealthMax.GetHashCode();
      if (DivingMin != 0F) hash ^= DivingMin.GetHashCode();
      if (DivingMax != 0F) hash ^= DivingMax.GetHashCode();
      if (RunSpeed != 0F) hash ^= RunSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntervalUpate != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(IntervalUpate);
      }
      if (DefendPlayerNum != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(DefendPlayerNum);
      }
      if (IgnoreDist != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(IgnoreDist);
      }
      if (BallOwnRange != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BallOwnRange);
      }
      if (PlayerRadius != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PlayerRadius);
      }
      if (GrabRange != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(GrabRange);
      }
      if (BallMoveSpd != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(BallMoveSpd);
      }
      if (Width != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Height);
      }
      if (InnerWidth != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(InnerWidth);
      }
      if (InnerHeight != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(InnerHeight);
      }
      if (OutWidth != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(OutWidth);
      }
      if (OutHeight != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(OutHeight);
      }
      if (CenterRadius != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(CenterRadius);
      }
      if (OutRadius != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(OutRadius);
      }
      if (PitchScale != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(PitchScale);
      }
      if (WidthSplit != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(WidthSplit);
      }
      if (HeightSplit != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(HeightSplit);
      }
      if (VerticalRange != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(VerticalRange);
      }
      if (TowardOffset != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(TowardOffset);
      }
      if (PropMaxNum != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(PropMaxNum);
      }
      if (ShootMin != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(ShootMin);
      }
      if (ShootMax != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(ShootMax);
      }
      if (DribbleMin != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(DribbleMin);
      }
      if (DribbleMax != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(DribbleMax);
      }
      if (GrabMin != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(GrabMin);
      }
      if (GrabMax != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(GrabMax);
      }
      if (DisturbMin != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(DisturbMin);
      }
      if (DisturbMax != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(DisturbMax);
      }
      if (TransferMin != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(TransferMin);
      }
      if (TransferMax != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(TransferMax);
      }
      if (LobshootMin != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(LobshootMin);
      }
      if (LobshootMax != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(LobshootMax);
      }
      if (AgainstMin != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(AgainstMin);
      }
      if (AgainstMax != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(AgainstMax);
      }
      if (HealthMin != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(HealthMin);
      }
      if (HealthMax != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(HealthMax);
      }
      if (DivingMin != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(DivingMin);
      }
      if (DivingMax != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(DivingMax);
      }
      if (RunSpeed != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(RunSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntervalUpate != 0F) {
        size += 1 + 4;
      }
      if (DefendPlayerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DefendPlayerNum);
      }
      if (IgnoreDist != 0F) {
        size += 1 + 4;
      }
      if (BallOwnRange != 0F) {
        size += 1 + 4;
      }
      if (PlayerRadius != 0F) {
        size += 1 + 4;
      }
      if (GrabRange != 0F) {
        size += 1 + 4;
      }
      if (BallMoveSpd != 0F) {
        size += 1 + 4;
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (InnerWidth != 0F) {
        size += 1 + 4;
      }
      if (InnerHeight != 0F) {
        size += 1 + 4;
      }
      if (OutWidth != 0F) {
        size += 1 + 4;
      }
      if (OutHeight != 0F) {
        size += 1 + 4;
      }
      if (CenterRadius != 0F) {
        size += 1 + 4;
      }
      if (OutRadius != 0F) {
        size += 1 + 4;
      }
      if (PitchScale != 0F) {
        size += 2 + 4;
      }
      if (WidthSplit != 0F) {
        size += 2 + 4;
      }
      if (HeightSplit != 0F) {
        size += 2 + 4;
      }
      if (VerticalRange != 0F) {
        size += 2 + 4;
      }
      if (TowardOffset != 0F) {
        size += 2 + 4;
      }
      if (PropMaxNum != 0F) {
        size += 2 + 4;
      }
      if (ShootMin != 0F) {
        size += 2 + 4;
      }
      if (ShootMax != 0F) {
        size += 2 + 4;
      }
      if (DribbleMin != 0F) {
        size += 2 + 4;
      }
      if (DribbleMax != 0F) {
        size += 2 + 4;
      }
      if (GrabMin != 0F) {
        size += 2 + 4;
      }
      if (GrabMax != 0F) {
        size += 2 + 4;
      }
      if (DisturbMin != 0F) {
        size += 2 + 4;
      }
      if (DisturbMax != 0F) {
        size += 2 + 4;
      }
      if (TransferMin != 0F) {
        size += 2 + 4;
      }
      if (TransferMax != 0F) {
        size += 2 + 4;
      }
      if (LobshootMin != 0F) {
        size += 2 + 4;
      }
      if (LobshootMax != 0F) {
        size += 2 + 4;
      }
      if (AgainstMin != 0F) {
        size += 2 + 4;
      }
      if (AgainstMax != 0F) {
        size += 2 + 4;
      }
      if (HealthMin != 0F) {
        size += 2 + 4;
      }
      if (HealthMax != 0F) {
        size += 2 + 4;
      }
      if (DivingMin != 0F) {
        size += 2 + 4;
      }
      if (DivingMax != 0F) {
        size += 2 + 4;
      }
      if (RunSpeed != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchParam other) {
      if (other == null) {
        return;
      }
      if (other.IntervalUpate != 0F) {
        IntervalUpate = other.IntervalUpate;
      }
      if (other.DefendPlayerNum != 0) {
        DefendPlayerNum = other.DefendPlayerNum;
      }
      if (other.IgnoreDist != 0F) {
        IgnoreDist = other.IgnoreDist;
      }
      if (other.BallOwnRange != 0F) {
        BallOwnRange = other.BallOwnRange;
      }
      if (other.PlayerRadius != 0F) {
        PlayerRadius = other.PlayerRadius;
      }
      if (other.GrabRange != 0F) {
        GrabRange = other.GrabRange;
      }
      if (other.BallMoveSpd != 0F) {
        BallMoveSpd = other.BallMoveSpd;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      if (other.InnerWidth != 0F) {
        InnerWidth = other.InnerWidth;
      }
      if (other.InnerHeight != 0F) {
        InnerHeight = other.InnerHeight;
      }
      if (other.OutWidth != 0F) {
        OutWidth = other.OutWidth;
      }
      if (other.OutHeight != 0F) {
        OutHeight = other.OutHeight;
      }
      if (other.CenterRadius != 0F) {
        CenterRadius = other.CenterRadius;
      }
      if (other.OutRadius != 0F) {
        OutRadius = other.OutRadius;
      }
      if (other.PitchScale != 0F) {
        PitchScale = other.PitchScale;
      }
      if (other.WidthSplit != 0F) {
        WidthSplit = other.WidthSplit;
      }
      if (other.HeightSplit != 0F) {
        HeightSplit = other.HeightSplit;
      }
      if (other.VerticalRange != 0F) {
        VerticalRange = other.VerticalRange;
      }
      if (other.TowardOffset != 0F) {
        TowardOffset = other.TowardOffset;
      }
      if (other.PropMaxNum != 0F) {
        PropMaxNum = other.PropMaxNum;
      }
      if (other.ShootMin != 0F) {
        ShootMin = other.ShootMin;
      }
      if (other.ShootMax != 0F) {
        ShootMax = other.ShootMax;
      }
      if (other.DribbleMin != 0F) {
        DribbleMin = other.DribbleMin;
      }
      if (other.DribbleMax != 0F) {
        DribbleMax = other.DribbleMax;
      }
      if (other.GrabMin != 0F) {
        GrabMin = other.GrabMin;
      }
      if (other.GrabMax != 0F) {
        GrabMax = other.GrabMax;
      }
      if (other.DisturbMin != 0F) {
        DisturbMin = other.DisturbMin;
      }
      if (other.DisturbMax != 0F) {
        DisturbMax = other.DisturbMax;
      }
      if (other.TransferMin != 0F) {
        TransferMin = other.TransferMin;
      }
      if (other.TransferMax != 0F) {
        TransferMax = other.TransferMax;
      }
      if (other.LobshootMin != 0F) {
        LobshootMin = other.LobshootMin;
      }
      if (other.LobshootMax != 0F) {
        LobshootMax = other.LobshootMax;
      }
      if (other.AgainstMin != 0F) {
        AgainstMin = other.AgainstMin;
      }
      if (other.AgainstMax != 0F) {
        AgainstMax = other.AgainstMax;
      }
      if (other.HealthMin != 0F) {
        HealthMin = other.HealthMin;
      }
      if (other.HealthMax != 0F) {
        HealthMax = other.HealthMax;
      }
      if (other.DivingMin != 0F) {
        DivingMin = other.DivingMin;
      }
      if (other.DivingMax != 0F) {
        DivingMax = other.DivingMax;
      }
      if (other.RunSpeed != 0F) {
        RunSpeed = other.RunSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            IntervalUpate = input.ReadFloat();
            break;
          }
          case 16: {
            DefendPlayerNum = input.ReadSInt32();
            break;
          }
          case 29: {
            IgnoreDist = input.ReadFloat();
            break;
          }
          case 37: {
            BallOwnRange = input.ReadFloat();
            break;
          }
          case 45: {
            PlayerRadius = input.ReadFloat();
            break;
          }
          case 53: {
            GrabRange = input.ReadFloat();
            break;
          }
          case 61: {
            BallMoveSpd = input.ReadFloat();
            break;
          }
          case 69: {
            Width = input.ReadFloat();
            break;
          }
          case 77: {
            Height = input.ReadFloat();
            break;
          }
          case 85: {
            InnerWidth = input.ReadFloat();
            break;
          }
          case 93: {
            InnerHeight = input.ReadFloat();
            break;
          }
          case 101: {
            OutWidth = input.ReadFloat();
            break;
          }
          case 109: {
            OutHeight = input.ReadFloat();
            break;
          }
          case 117: {
            CenterRadius = input.ReadFloat();
            break;
          }
          case 125: {
            OutRadius = input.ReadFloat();
            break;
          }
          case 133: {
            PitchScale = input.ReadFloat();
            break;
          }
          case 141: {
            WidthSplit = input.ReadFloat();
            break;
          }
          case 149: {
            HeightSplit = input.ReadFloat();
            break;
          }
          case 157: {
            VerticalRange = input.ReadFloat();
            break;
          }
          case 165: {
            TowardOffset = input.ReadFloat();
            break;
          }
          case 173: {
            PropMaxNum = input.ReadFloat();
            break;
          }
          case 181: {
            ShootMin = input.ReadFloat();
            break;
          }
          case 189: {
            ShootMax = input.ReadFloat();
            break;
          }
          case 197: {
            DribbleMin = input.ReadFloat();
            break;
          }
          case 205: {
            DribbleMax = input.ReadFloat();
            break;
          }
          case 213: {
            GrabMin = input.ReadFloat();
            break;
          }
          case 221: {
            GrabMax = input.ReadFloat();
            break;
          }
          case 229: {
            DisturbMin = input.ReadFloat();
            break;
          }
          case 237: {
            DisturbMax = input.ReadFloat();
            break;
          }
          case 245: {
            TransferMin = input.ReadFloat();
            break;
          }
          case 253: {
            TransferMax = input.ReadFloat();
            break;
          }
          case 261: {
            LobshootMin = input.ReadFloat();
            break;
          }
          case 269: {
            LobshootMax = input.ReadFloat();
            break;
          }
          case 277: {
            AgainstMin = input.ReadFloat();
            break;
          }
          case 285: {
            AgainstMax = input.ReadFloat();
            break;
          }
          case 293: {
            HealthMin = input.ReadFloat();
            break;
          }
          case 301: {
            HealthMax = input.ReadFloat();
            break;
          }
          case 309: {
            DivingMin = input.ReadFloat();
            break;
          }
          case 317: {
            DivingMax = input.ReadFloat();
            break;
          }
          case 325: {
            RunSpeed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchParamList : pb::IMessage<MatchParamList> {
    private static readonly pb::MessageParser<MatchParamList> _parser = new pb::MessageParser<MatchParamList>(() => new MatchParamList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchParamList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Idleafk.GameConfigReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchParamList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchParamList(MatchParamList other) : this() {
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchParamList Clone() {
      return new MatchParamList(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Idleafk.MatchParam> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Idleafk.MatchParam.Parser);
    private readonly pbc::RepeatedField<global::Idleafk.MatchParam> rows_ = new pbc::RepeatedField<global::Idleafk.MatchParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Idleafk.MatchParam> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchParamList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchParamList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchParamList other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
