/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.idleafk.MatchParam');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idleafk.MatchParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idleafk.MatchParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idleafk.MatchParam.displayName = 'proto.idleafk.MatchParam';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idleafk.MatchParam.prototype.toObject = function(opt_includeInstance) {
  return proto.idleafk.MatchParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idleafk.MatchParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idleafk.MatchParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    intervalupate: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    defendplayernum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ignoredist: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    ballownrange: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    playerradius: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    grabrange: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    ballmovespd: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    width: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    height: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    innerwidth: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    innerheight: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    outwidth: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    outheight: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    centerradius: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    outradius: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    pitchscale: +jspb.Message.getFieldWithDefault(msg, 16, 0.0),
    widthsplit: +jspb.Message.getFieldWithDefault(msg, 17, 0.0),
    heightsplit: +jspb.Message.getFieldWithDefault(msg, 18, 0.0),
    verticalrange: +jspb.Message.getFieldWithDefault(msg, 19, 0.0),
    towardoffset: +jspb.Message.getFieldWithDefault(msg, 20, 0.0),
    propmaxnum: +jspb.Message.getFieldWithDefault(msg, 21, 0.0),
    shootmin: +jspb.Message.getFieldWithDefault(msg, 22, 0.0),
    shootmax: +jspb.Message.getFieldWithDefault(msg, 23, 0.0),
    dribblemin: +jspb.Message.getFieldWithDefault(msg, 24, 0.0),
    dribblemax: +jspb.Message.getFieldWithDefault(msg, 25, 0.0),
    grabmin: +jspb.Message.getFieldWithDefault(msg, 26, 0.0),
    grabmax: +jspb.Message.getFieldWithDefault(msg, 27, 0.0),
    disturbmin: +jspb.Message.getFieldWithDefault(msg, 28, 0.0),
    disturbmax: +jspb.Message.getFieldWithDefault(msg, 29, 0.0),
    transfermin: +jspb.Message.getFieldWithDefault(msg, 30, 0.0),
    transfermax: +jspb.Message.getFieldWithDefault(msg, 31, 0.0),
    lobshootmin: +jspb.Message.getFieldWithDefault(msg, 32, 0.0),
    lobshootmax: +jspb.Message.getFieldWithDefault(msg, 33, 0.0),
    againstmin: +jspb.Message.getFieldWithDefault(msg, 34, 0.0),
    againstmax: +jspb.Message.getFieldWithDefault(msg, 35, 0.0),
    healthmin: +jspb.Message.getFieldWithDefault(msg, 36, 0.0),
    healthmax: +jspb.Message.getFieldWithDefault(msg, 37, 0.0),
    divingmin: +jspb.Message.getFieldWithDefault(msg, 38, 0.0),
    divingmax: +jspb.Message.getFieldWithDefault(msg, 39, 0.0),
    runspeed: +jspb.Message.getFieldWithDefault(msg, 40, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idleafk.MatchParam}
 */
proto.idleafk.MatchParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idleafk.MatchParam;
  return proto.idleafk.MatchParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idleafk.MatchParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idleafk.MatchParam}
 */
proto.idleafk.MatchParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIntervalupate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDefendplayernum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIgnoredist(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBallownrange(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPlayerradius(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGrabrange(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBallmovespd(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInnerwidth(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInnerheight(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutwidth(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutheight(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCenterradius(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutradius(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchscale(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidthsplit(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeightsplit(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVerticalrange(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTowardoffset(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPropmaxnum(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShootmin(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShootmax(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDribblemin(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDribblemax(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGrabmin(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGrabmax(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDisturbmin(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDisturbmax(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTransfermin(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTransfermax(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLobshootmin(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLobshootmax(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAgainstmin(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAgainstmax(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealthmin(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealthmax(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDivingmin(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDivingmax(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRunspeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idleafk.MatchParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idleafk.MatchParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idleafk.MatchParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idleafk.MatchParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntervalupate();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getDefendplayernum();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = message.getIgnoredist();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getBallownrange();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPlayerradius();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getGrabrange();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getBallmovespd();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getInnerwidth();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getInnerheight();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getOutwidth();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getOutheight();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getCenterradius();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getOutradius();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getPitchscale();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getWidthsplit();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getHeightsplit();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = message.getVerticalrange();
  if (f !== 0.0) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = message.getTowardoffset();
  if (f !== 0.0) {
    writer.writeFloat(
      20,
      f
    );
  }
  f = message.getPropmaxnum();
  if (f !== 0.0) {
    writer.writeFloat(
      21,
      f
    );
  }
  f = message.getShootmin();
  if (f !== 0.0) {
    writer.writeFloat(
      22,
      f
    );
  }
  f = message.getShootmax();
  if (f !== 0.0) {
    writer.writeFloat(
      23,
      f
    );
  }
  f = message.getDribblemin();
  if (f !== 0.0) {
    writer.writeFloat(
      24,
      f
    );
  }
  f = message.getDribblemax();
  if (f !== 0.0) {
    writer.writeFloat(
      25,
      f
    );
  }
  f = message.getGrabmin();
  if (f !== 0.0) {
    writer.writeFloat(
      26,
      f
    );
  }
  f = message.getGrabmax();
  if (f !== 0.0) {
    writer.writeFloat(
      27,
      f
    );
  }
  f = message.getDisturbmin();
  if (f !== 0.0) {
    writer.writeFloat(
      28,
      f
    );
  }
  f = message.getDisturbmax();
  if (f !== 0.0) {
    writer.writeFloat(
      29,
      f
    );
  }
  f = message.getTransfermin();
  if (f !== 0.0) {
    writer.writeFloat(
      30,
      f
    );
  }
  f = message.getTransfermax();
  if (f !== 0.0) {
    writer.writeFloat(
      31,
      f
    );
  }
  f = message.getLobshootmin();
  if (f !== 0.0) {
    writer.writeFloat(
      32,
      f
    );
  }
  f = message.getLobshootmax();
  if (f !== 0.0) {
    writer.writeFloat(
      33,
      f
    );
  }
  f = message.getAgainstmin();
  if (f !== 0.0) {
    writer.writeFloat(
      34,
      f
    );
  }
  f = message.getAgainstmax();
  if (f !== 0.0) {
    writer.writeFloat(
      35,
      f
    );
  }
  f = message.getHealthmin();
  if (f !== 0.0) {
    writer.writeFloat(
      36,
      f
    );
  }
  f = message.getHealthmax();
  if (f !== 0.0) {
    writer.writeFloat(
      37,
      f
    );
  }
  f = message.getDivingmin();
  if (f !== 0.0) {
    writer.writeFloat(
      38,
      f
    );
  }
  f = message.getDivingmax();
  if (f !== 0.0) {
    writer.writeFloat(
      39,
      f
    );
  }
  f = message.getRunspeed();
  if (f !== 0.0) {
    writer.writeFloat(
      40,
      f
    );
  }
};


/**
 * optional float intervalUpate = 1;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getIntervalupate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setIntervalupate = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional sint32 defendPlayerNum = 2;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getDefendplayernum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setDefendplayernum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float ignoreDist = 3;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getIgnoredist = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setIgnoredist = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float ballOwnRange = 4;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getBallownrange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setBallownrange = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float playerRadius = 5;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getPlayerradius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setPlayerradius = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float grabRange = 6;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getGrabrange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setGrabrange = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float ballMoveSpd = 7;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getBallmovespd = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setBallmovespd = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float width = 8;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setWidth = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float height = 9;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setHeight = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float innerWidth = 10;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getInnerwidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setInnerwidth = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float innerHeight = 11;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getInnerheight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setInnerheight = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float outWidth = 12;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getOutwidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setOutwidth = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float outHeight = 13;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getOutheight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setOutheight = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float centerRadius = 14;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getCenterradius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setCenterradius = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float outRadius = 15;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getOutradius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setOutradius = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float pitchScale = 16;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getPitchscale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setPitchscale = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float widthSplit = 17;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getWidthsplit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setWidthsplit = function(value) {
  jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional float heightSplit = 18;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getHeightsplit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setHeightsplit = function(value) {
  jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional float verticalRange = 19;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getVerticalrange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setVerticalrange = function(value) {
  jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional float towardOffset = 20;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getTowardoffset = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 20, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setTowardoffset = function(value) {
  jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional float propMaxNum = 21;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getPropmaxnum = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 21, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setPropmaxnum = function(value) {
  jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional float shootMin = 22;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getShootmin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 22, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setShootmin = function(value) {
  jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional float shootMax = 23;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getShootmax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 23, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setShootmax = function(value) {
  jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional float dribbleMin = 24;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getDribblemin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 24, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setDribblemin = function(value) {
  jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional float dribbleMax = 25;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getDribblemax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 25, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setDribblemax = function(value) {
  jspb.Message.setProto3FloatField(this, 25, value);
};


/**
 * optional float grabMin = 26;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getGrabmin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 26, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setGrabmin = function(value) {
  jspb.Message.setProto3FloatField(this, 26, value);
};


/**
 * optional float grabMax = 27;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getGrabmax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 27, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setGrabmax = function(value) {
  jspb.Message.setProto3FloatField(this, 27, value);
};


/**
 * optional float disturbMin = 28;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getDisturbmin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 28, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setDisturbmin = function(value) {
  jspb.Message.setProto3FloatField(this, 28, value);
};


/**
 * optional float disturbMax = 29;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getDisturbmax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 29, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setDisturbmax = function(value) {
  jspb.Message.setProto3FloatField(this, 29, value);
};


/**
 * optional float transferMin = 30;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getTransfermin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 30, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setTransfermin = function(value) {
  jspb.Message.setProto3FloatField(this, 30, value);
};


/**
 * optional float transferMax = 31;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getTransfermax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 31, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setTransfermax = function(value) {
  jspb.Message.setProto3FloatField(this, 31, value);
};


/**
 * optional float lobshootMin = 32;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getLobshootmin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 32, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setLobshootmin = function(value) {
  jspb.Message.setProto3FloatField(this, 32, value);
};


/**
 * optional float lobshootMax = 33;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getLobshootmax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 33, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setLobshootmax = function(value) {
  jspb.Message.setProto3FloatField(this, 33, value);
};


/**
 * optional float againstMin = 34;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getAgainstmin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 34, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setAgainstmin = function(value) {
  jspb.Message.setProto3FloatField(this, 34, value);
};


/**
 * optional float againstMax = 35;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getAgainstmax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 35, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setAgainstmax = function(value) {
  jspb.Message.setProto3FloatField(this, 35, value);
};


/**
 * optional float healthMin = 36;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getHealthmin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 36, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setHealthmin = function(value) {
  jspb.Message.setProto3FloatField(this, 36, value);
};


/**
 * optional float healthMax = 37;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getHealthmax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 37, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setHealthmax = function(value) {
  jspb.Message.setProto3FloatField(this, 37, value);
};


/**
 * optional float divingMin = 38;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getDivingmin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 38, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setDivingmin = function(value) {
  jspb.Message.setProto3FloatField(this, 38, value);
};


/**
 * optional float divingMax = 39;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getDivingmax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 39, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setDivingmax = function(value) {
  jspb.Message.setProto3FloatField(this, 39, value);
};


/**
 * optional float runSpeed = 40;
 * @return {number}
 */
proto.idleafk.MatchParam.prototype.getRunspeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 40, 0.0));
};


/** @param {number} value */
proto.idleafk.MatchParam.prototype.setRunspeed = function(value) {
  jspb.Message.setProto3FloatField(this, 40, value);
};


