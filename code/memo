-- 数据格式 (你要是能维护，算你狠!!!)

string_list {
                head[]           
                msgs[]  -- messages    {
                                            name 
                                            level
                                            message_name
                                            child_name
                                            fields[]     -- message
                                        }

                        -- message      {
                                            message  -- name 
                                            level
                                            message_name
                                            child_name
                                            fields[]     -- field   {
                                                                        type
                                                                        name
                                                                        id
                                                                        annotation
                                                                        values[]
                                                                    }
                                        }
                                        
                        -- enum         {
                                            name -- "enum " + sheetName
                                            message_name --  sheetName
                                            fields : [] -- field    {
                                                                        type
                                                                        id
                                                                        name = ""
                                                                        annotation
                                                                    }
                                        }
            }



scheme  {
            packages[] -- package   {
                                        name (包名)
                                        types (object)--    {
                                                                typename (message的名字)
                                                                msgType (pbjs.Type) {
                                                                                        fields
                                                                                    }
                                                            }

                                        instances (object) --   {
                                                                    typename,
                                                                    instance, -- (msgType.create())
                                                                }
                                    }
        }


{
    'bright'    : '\x1B[1m', // 亮色
    'grey'      : '\x1B[2m', // 灰色
    'italic'    : '\x1B[3m', // 斜体
    'underline' : '\x1B[4m', // 下划线
    'reverse'   : '\x1B[7m', // 反向
    'hidden'    : '\x1B[8m', // 隐藏
    'black'     : '\x1B[30m', // 黑色
    'red'       : '\x1B[31m', // 红色
    'green'     : '\x1B[32m', // 绿色
    'yellow'    : '\x1B[33m', // 黄色
    'blue'      : '\x1B[34m', // 蓝色
    'magenta'   : '\x1B[35m', // 品红
    'cyan'      : '\x1B[36m', // 青色
    'white'     : '\x1B[37m', // 白色
    'blackBG'   : '\x1B[40m', // 背景色为黑色
    'redBG'     : '\x1B[41m', // 背景色为红色
    'greenBG'   : '\x1B[42m', // 背景色为绿色
    'yellowBG'  : '\x1B[43m', // 背景色为黄色
    'blueBG'    : '\x1B[44m', // 背景色为蓝色
    'magentaBG' : '\x1B[45m', // 背景色为品红
    'cyanBG'    : '\x1B[46m', // 背景色为青色
    'whiteBG'   : '\x1B[47m' // 背景色为白色
}


proto类型	    java类型	    C++类型	    备注
double	        double	        double	
float	        float	        float	
int32	        int	            int32	使用可变长编码方式。编码负数时不够高效——如果你的字段可能含有负数，那么请使用sint32。
int64	        long	        int64	使用可变长编码方式。编码负数时不够高效——如果你的字段可能含有负数，那么请使用sint64。
unit32	        int[1]	        unit32	总是4个字节。如果数值总是比总是比228大的话，这个类型会比uint32高效。
unit64	        long[1]	        unit64	总是8个字节。如果数值总是比总是比256大的话，这个类型会比uint64高效。
sint32	        int	            int32	使用可变长编码方式。有符号的整型值。编码时比通常的int32高效。
sint64	        long	        int64	使用可变长编码方式。有符号的整型值。编码时比通常的int64高效。
fixed32	        int[1]	        unit32	
fixed64	        long[1]	        unit64	总是8个字节。如果数值总是比总是比256大的话，这个类型会比uint64高效。
sfixed32	    int	            int32	总是4个字节。
sfixed64	    long	        int64	总是8个字节。
bool	        boolean	        bool	
string	        String	        string	一个字符串必须是UTF-8编码或者7-bit ASCII编码的文本。
bytes	        ByteString	    string	可能包含任意顺序的字节数据


enum	        枚举(数字从零开始) 作用是为字段指定某”预定义值序列”	enum Type {MAN = 0;WOMAN = 1; OTHER= 3;}
message	        消息体	message User{}
repeated	    数组/集合	repeated User users = 1
import	        导入定义	import "protos/other_protos.proto"
//	            注释	//用于注释
extend	        扩展	extend User {}
package	        包名	相当于命名空间，用来防止不同消息类型的明明冲突




